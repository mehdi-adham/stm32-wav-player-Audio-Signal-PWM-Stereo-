
Audio Signal PWM stereo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ffc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004108  08004108  00014108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004148  08004148  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004148  08004148  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004148  08004148  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004148  08004148  00014148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800414c  0800414c  0001414c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004150  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000422c  20000010  08004160  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000423c  08004160  0002423c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ace8  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a14  00000000  00000000  0002ad21  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c88  00000000  00000000  0002c738  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be0  00000000  00000000  0002d3c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016d6e  00000000  00000000  0002dfa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000094af  00000000  00000000  00044d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008663f  00000000  00000000  0004e1bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d47fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003460  00000000  00000000  000d4878  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080040f0 	.word	0x080040f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080040f0 	.word	0x080040f0

0800014c <MyEvent1>:
void GetHeaderInfo(WavHeader_typedef *Out_WavHeaderInfo ,uint8_t *pInput);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MyEvent1(DMA_HandleTypeDef *_hdma){
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]

	NumOfBLOCK++;
 8000154:	4b48      	ldr	r3, [pc, #288]	; (8000278 <MyEvent1+0x12c>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	3301      	adds	r3, #1
 800015a:	4a47      	ldr	r2, [pc, #284]	; (8000278 <MyEvent1+0x12c>)
 800015c:	6013      	str	r3, [r2, #0]
	if((int)(headerInfo.DATA_SZ/(BLOCK)) <= (int)(NumOfBLOCK))
 800015e:	4b47      	ldr	r3, [pc, #284]	; (800027c <MyEvent1+0x130>)
 8000160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000162:	2b00      	cmp	r3, #0
 8000164:	da01      	bge.n	800016a <MyEvent1+0x1e>
 8000166:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800016a:	131b      	asrs	r3, r3, #12
 800016c:	461a      	mov	r2, r3
 800016e:	4b42      	ldr	r3, [pc, #264]	; (8000278 <MyEvent1+0x12c>)
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	429a      	cmp	r2, r3
 8000174:	dc03      	bgt.n	800017e <MyEvent1+0x32>
	{
		EndOffle_flag = 1;
 8000176:	4b42      	ldr	r3, [pc, #264]	; (8000280 <MyEvent1+0x134>)
 8000178:	2201      	movs	r2, #1
 800017a:	701a      	strb	r2, [r3, #0]
		for(int i=0 ,j=0 ;i<BLOCK ;i+=2 ,j++){
			Right[fp][j] = Wave[fp][i];//right channel
			Left[fp][j] = Wave[fp][i+1];//left channel
		}
	}
}
 800017c:	e077      	b.n	800026e <MyEvent1+0x122>
		fp = 1-fp;
 800017e:	4b41      	ldr	r3, [pc, #260]	; (8000284 <MyEvent1+0x138>)
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	b2db      	uxtb	r3, r3
 8000184:	f1c3 0301 	rsb	r3, r3, #1
 8000188:	b2da      	uxtb	r2, r3
 800018a:	4b3e      	ldr	r3, [pc, #248]	; (8000284 <MyEvent1+0x138>)
 800018c:	701a      	strb	r2, [r3, #0]
		HAL_DMA_Abort(&hdma_tim4_ch1);
 800018e:	483e      	ldr	r0, [pc, #248]	; (8000288 <MyEvent1+0x13c>)
 8000190:	f001 fa3f 	bl	8001612 <HAL_DMA_Abort>
		HAL_DMA_Start_IT(&hdma_tim4_ch1, (uint32_t)Right[1-fp], (uint32_t) &(TIM2->CCR1), BLOCK/2);
 8000194:	4b3b      	ldr	r3, [pc, #236]	; (8000284 <MyEvent1+0x138>)
 8000196:	781b      	ldrb	r3, [r3, #0]
 8000198:	b2db      	uxtb	r3, r3
 800019a:	f1c3 0301 	rsb	r3, r3, #1
 800019e:	02db      	lsls	r3, r3, #11
 80001a0:	4a3a      	ldr	r2, [pc, #232]	; (800028c <MyEvent1+0x140>)
 80001a2:	4413      	add	r3, r2
 80001a4:	4619      	mov	r1, r3
 80001a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80001aa:	4a39      	ldr	r2, [pc, #228]	; (8000290 <MyEvent1+0x144>)
 80001ac:	4836      	ldr	r0, [pc, #216]	; (8000288 <MyEvent1+0x13c>)
 80001ae:	f001 f9d1 	bl	8001554 <HAL_DMA_Start_IT>
		HAL_DMA_Abort(&hdma_tim4_ch2);
 80001b2:	4838      	ldr	r0, [pc, #224]	; (8000294 <MyEvent1+0x148>)
 80001b4:	f001 fa2d 	bl	8001612 <HAL_DMA_Abort>
		HAL_DMA_Start_IT(&hdma_tim4_ch2, (uint32_t)Left[1-fp], (uint32_t) &(TIM2->CCR2), BLOCK/2);
 80001b8:	4b32      	ldr	r3, [pc, #200]	; (8000284 <MyEvent1+0x138>)
 80001ba:	781b      	ldrb	r3, [r3, #0]
 80001bc:	b2db      	uxtb	r3, r3
 80001be:	f1c3 0301 	rsb	r3, r3, #1
 80001c2:	02db      	lsls	r3, r3, #11
 80001c4:	4a34      	ldr	r2, [pc, #208]	; (8000298 <MyEvent1+0x14c>)
 80001c6:	4413      	add	r3, r2
 80001c8:	4619      	mov	r1, r3
 80001ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80001ce:	4a33      	ldr	r2, [pc, #204]	; (800029c <MyEvent1+0x150>)
 80001d0:	4830      	ldr	r0, [pc, #192]	; (8000294 <MyEvent1+0x148>)
 80001d2:	f001 f9bf 	bl	8001554 <HAL_DMA_Start_IT>
		HAL_UART_Receive_DMA(&huart1, Wave[fp], BLOCK);
 80001d6:	4b2b      	ldr	r3, [pc, #172]	; (8000284 <MyEvent1+0x138>)
 80001d8:	781b      	ldrb	r3, [r3, #0]
 80001da:	b2db      	uxtb	r3, r3
 80001dc:	031b      	lsls	r3, r3, #12
 80001de:	4a30      	ldr	r2, [pc, #192]	; (80002a0 <MyEvent1+0x154>)
 80001e0:	4413      	add	r3, r2
 80001e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80001e6:	4619      	mov	r1, r3
 80001e8:	482e      	ldr	r0, [pc, #184]	; (80002a4 <MyEvent1+0x158>)
 80001ea:	f003 f9b8 	bl	800355e <HAL_UART_Receive_DMA>
		HAL_UART_Transmit(&huart1, (uint8_t *)"A", 1, 100);
 80001ee:	2364      	movs	r3, #100	; 0x64
 80001f0:	2201      	movs	r2, #1
 80001f2:	492d      	ldr	r1, [pc, #180]	; (80002a8 <MyEvent1+0x15c>)
 80001f4:	482b      	ldr	r0, [pc, #172]	; (80002a4 <MyEvent1+0x158>)
 80001f6:	f003 f920 	bl	800343a <HAL_UART_Transmit>
		for(int i=0 ,j=0 ;i<BLOCK ;i+=2 ,j++){
 80001fa:	2300      	movs	r3, #0
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	2300      	movs	r3, #0
 8000200:	60bb      	str	r3, [r7, #8]
 8000202:	e030      	b.n	8000266 <MyEvent1+0x11a>
			Right[fp][j] = Wave[fp][i];//right channel
 8000204:	4b1f      	ldr	r3, [pc, #124]	; (8000284 <MyEvent1+0x138>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	b2db      	uxtb	r3, r3
 800020a:	4619      	mov	r1, r3
 800020c:	4b1d      	ldr	r3, [pc, #116]	; (8000284 <MyEvent1+0x138>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	b2db      	uxtb	r3, r3
 8000212:	4618      	mov	r0, r3
 8000214:	4a22      	ldr	r2, [pc, #136]	; (80002a0 <MyEvent1+0x154>)
 8000216:	030b      	lsls	r3, r1, #12
 8000218:	441a      	add	r2, r3
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	4413      	add	r3, r2
 800021e:	7819      	ldrb	r1, [r3, #0]
 8000220:	4a1a      	ldr	r2, [pc, #104]	; (800028c <MyEvent1+0x140>)
 8000222:	02c3      	lsls	r3, r0, #11
 8000224:	441a      	add	r2, r3
 8000226:	68bb      	ldr	r3, [r7, #8]
 8000228:	4413      	add	r3, r2
 800022a:	460a      	mov	r2, r1
 800022c:	701a      	strb	r2, [r3, #0]
			Left[fp][j] = Wave[fp][i+1];//left channel
 800022e:	4b15      	ldr	r3, [pc, #84]	; (8000284 <MyEvent1+0x138>)
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	b2db      	uxtb	r3, r3
 8000234:	461c      	mov	r4, r3
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	3301      	adds	r3, #1
 800023a:	4a12      	ldr	r2, [pc, #72]	; (8000284 <MyEvent1+0x138>)
 800023c:	7812      	ldrb	r2, [r2, #0]
 800023e:	b2d2      	uxtb	r2, r2
 8000240:	4610      	mov	r0, r2
 8000242:	4917      	ldr	r1, [pc, #92]	; (80002a0 <MyEvent1+0x154>)
 8000244:	0322      	lsls	r2, r4, #12
 8000246:	440a      	add	r2, r1
 8000248:	4413      	add	r3, r2
 800024a:	7819      	ldrb	r1, [r3, #0]
 800024c:	4a12      	ldr	r2, [pc, #72]	; (8000298 <MyEvent1+0x14c>)
 800024e:	02c3      	lsls	r3, r0, #11
 8000250:	441a      	add	r2, r3
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	4413      	add	r3, r2
 8000256:	460a      	mov	r2, r1
 8000258:	701a      	strb	r2, [r3, #0]
		for(int i=0 ,j=0 ;i<BLOCK ;i+=2 ,j++){
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	3302      	adds	r3, #2
 800025e:	60fb      	str	r3, [r7, #12]
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	3301      	adds	r3, #1
 8000264:	60bb      	str	r3, [r7, #8]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800026c:	dbca      	blt.n	8000204 <MyEvent1+0xb8>
}
 800026e:	bf00      	nop
 8000270:	3714      	adds	r7, #20
 8000272:	46bd      	mov	sp, r7
 8000274:	bd90      	pop	{r4, r7, pc}
 8000276:	bf00      	nop
 8000278:	20000030 	.word	0x20000030
 800027c:	2000214c 	.word	0x2000214c
 8000280:	20000034 	.word	0x20000034
 8000284:	2000002c 	.word	0x2000002c
 8000288:	200041c4 	.word	0x200041c4
 800028c:	2000007c 	.word	0x2000007c
 8000290:	40000034 	.word	0x40000034
 8000294:	20000038 	.word	0x20000038
 8000298:	200010c4 	.word	0x200010c4
 800029c:	40000038 	.word	0x40000038
 80002a0:	2000217c 	.word	0x2000217c
 80002a4:	20002108 	.word	0x20002108
 80002a8:	08004108 	.word	0x08004108

080002ac <MyEvent2>:

void MyEvent2(DMA_HandleTypeDef *_hdma){
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]


}
 80002b4:	bf00      	nop
 80002b6:	370c      	adds	r7, #12
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bc80      	pop	{r7}
 80002bc:	4770      	bx	lr
	...

080002c0 <MyEvent3>:

void MyEvent3(DMA_HandleTypeDef *_hdma){
 80002c0:	b490      	push	{r4, r7}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
	/* 4096 2048*/
	if(NumOfBLOCK==0){
 80002c8:	4b21      	ldr	r3, [pc, #132]	; (8000350 <MyEvent3+0x90>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d139      	bne.n	8000344 <MyEvent3+0x84>
		for(int i=0 ,j=0 ;i<BLOCK ;i+=2 ,j++){
 80002d0:	2300      	movs	r3, #0
 80002d2:	60fb      	str	r3, [r7, #12]
 80002d4:	2300      	movs	r3, #0
 80002d6:	60bb      	str	r3, [r7, #8]
 80002d8:	e030      	b.n	800033c <MyEvent3+0x7c>
			Right[fp][j] = Wave[fp][i];//right channel
 80002da:	4b1e      	ldr	r3, [pc, #120]	; (8000354 <MyEvent3+0x94>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	4619      	mov	r1, r3
 80002e2:	4b1c      	ldr	r3, [pc, #112]	; (8000354 <MyEvent3+0x94>)
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	4618      	mov	r0, r3
 80002ea:	4a1b      	ldr	r2, [pc, #108]	; (8000358 <MyEvent3+0x98>)
 80002ec:	030b      	lsls	r3, r1, #12
 80002ee:	441a      	add	r2, r3
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	4413      	add	r3, r2
 80002f4:	7819      	ldrb	r1, [r3, #0]
 80002f6:	4a19      	ldr	r2, [pc, #100]	; (800035c <MyEvent3+0x9c>)
 80002f8:	02c3      	lsls	r3, r0, #11
 80002fa:	441a      	add	r2, r3
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	4413      	add	r3, r2
 8000300:	460a      	mov	r2, r1
 8000302:	701a      	strb	r2, [r3, #0]
			Left[fp][j] = Wave[fp][i+1];//left channel
 8000304:	4b13      	ldr	r3, [pc, #76]	; (8000354 <MyEvent3+0x94>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	b2db      	uxtb	r3, r3
 800030a:	461c      	mov	r4, r3
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	3301      	adds	r3, #1
 8000310:	4a10      	ldr	r2, [pc, #64]	; (8000354 <MyEvent3+0x94>)
 8000312:	7812      	ldrb	r2, [r2, #0]
 8000314:	b2d2      	uxtb	r2, r2
 8000316:	4610      	mov	r0, r2
 8000318:	490f      	ldr	r1, [pc, #60]	; (8000358 <MyEvent3+0x98>)
 800031a:	0322      	lsls	r2, r4, #12
 800031c:	440a      	add	r2, r1
 800031e:	4413      	add	r3, r2
 8000320:	7819      	ldrb	r1, [r3, #0]
 8000322:	4a0f      	ldr	r2, [pc, #60]	; (8000360 <MyEvent3+0xa0>)
 8000324:	02c3      	lsls	r3, r0, #11
 8000326:	441a      	add	r2, r3
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	4413      	add	r3, r2
 800032c:	460a      	mov	r2, r1
 800032e:	701a      	strb	r2, [r3, #0]
		for(int i=0 ,j=0 ;i<BLOCK ;i+=2 ,j++){
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	3302      	adds	r3, #2
 8000334:	60fb      	str	r3, [r7, #12]
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	3301      	adds	r3, #1
 800033a:	60bb      	str	r3, [r7, #8]
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000342:	dbca      	blt.n	80002da <MyEvent3+0x1a>
		}
	}
}
 8000344:	bf00      	nop
 8000346:	3710      	adds	r7, #16
 8000348:	46bd      	mov	sp, r7
 800034a:	bc90      	pop	{r4, r7}
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	20000030 	.word	0x20000030
 8000354:	2000002c 	.word	0x2000002c
 8000358:	2000217c 	.word	0x2000217c
 800035c:	2000007c 	.word	0x2000007c
 8000360:	200010c4 	.word	0x200010c4

08000364 <Stop>:

void Stop(void){
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	btn_flag = 1;
 8000368:	4b13      	ldr	r3, [pc, #76]	; (80003b8 <Stop+0x54>)
 800036a:	2201      	movs	r2, #1
 800036c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *)"C", 1, 100);
 800036e:	2364      	movs	r3, #100	; 0x64
 8000370:	2201      	movs	r2, #1
 8000372:	4912      	ldr	r1, [pc, #72]	; (80003bc <Stop+0x58>)
 8000374:	4812      	ldr	r0, [pc, #72]	; (80003c0 <Stop+0x5c>)
 8000376:	f003 f860 	bl	800343a <HAL_UART_Transmit>

	HAL_Delay(100);
 800037a:	2064      	movs	r0, #100	; 0x64
 800037c:	f000 ff60 	bl	8001240 <HAL_Delay>

	clearBuff();
 8000380:	f000 f9d4 	bl	800072c <clearBuff>

	HAL_UART_DMAStop(&huart1);
 8000384:	480e      	ldr	r0, [pc, #56]	; (80003c0 <Stop+0x5c>)
 8000386:	f003 f91a 	bl	80035be <HAL_UART_DMAStop>
	NumOfBLOCK=0;
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <Stop+0x60>)
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
	TIM_CCxChannelCmd(TIM2, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8000390:	2200      	movs	r2, #0
 8000392:	2100      	movs	r1, #0
 8000394:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000398:	f002 ff80 	bl	800329c <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(TIM2, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800039c:	2200      	movs	r2, #0
 800039e:	2104      	movs	r1, #4
 80003a0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80003a4:	f002 ff7a 	bl	800329c <TIM_CCxChannelCmd>
	HAL_DMA_Abort(&hdma_tim4_ch1);
 80003a8:	4807      	ldr	r0, [pc, #28]	; (80003c8 <Stop+0x64>)
 80003aa:	f001 f932 	bl	8001612 <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim4_ch2);
 80003ae:	4807      	ldr	r0, [pc, #28]	; (80003cc <Stop+0x68>)
 80003b0:	f001 f92f 	bl	8001612 <HAL_DMA_Abort>

}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20000000 	.word	0x20000000
 80003bc:	0800410c 	.word	0x0800410c
 80003c0:	20002108 	.word	0x20002108
 80003c4:	20000030 	.word	0x20000030
 80003c8:	200041c4 	.word	0x200041c4
 80003cc:	20000038 	.word	0x20000038

080003d0 <play>:

void play(void){
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0


	/**************************get WavHeader Info*******************/
	if(NumOfBLOCK == 0)
 80003d4:	4b65      	ldr	r3, [pc, #404]	; (800056c <play+0x19c>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d168      	bne.n	80004ae <play+0xde>
	{
		HAL_UART_Transmit(&huart1, (uint8_t *)"B", 1, 10);
 80003dc:	230a      	movs	r3, #10
 80003de:	2201      	movs	r2, #1
 80003e0:	4963      	ldr	r1, [pc, #396]	; (8000570 <play+0x1a0>)
 80003e2:	4864      	ldr	r0, [pc, #400]	; (8000574 <play+0x1a4>)
 80003e4:	f003 f829 	bl	800343a <HAL_UART_Transmit>
		HAL_UART_Receive_DMA(&huart1, WaveHeaderbuff, 45 );
 80003e8:	222d      	movs	r2, #45	; 0x2d
 80003ea:	4963      	ldr	r1, [pc, #396]	; (8000578 <play+0x1a8>)
 80003ec:	4861      	ldr	r0, [pc, #388]	; (8000574 <play+0x1a4>)
 80003ee:	f003 f8b6 	bl	800355e <HAL_UART_Receive_DMA>

		HAL_Delay(100);
 80003f2:	2064      	movs	r0, #100	; 0x64
 80003f4:	f000 ff24 	bl	8001240 <HAL_Delay>

		GetHeaderInfo(&headerInfo, WaveHeaderbuff);
 80003f8:	495f      	ldr	r1, [pc, #380]	; (8000578 <play+0x1a8>)
 80003fa:	4860      	ldr	r0, [pc, #384]	; (800057c <play+0x1ac>)
 80003fc:	f000 f9bc 	bl	8000778 <GetHeaderInfo>

		if(headerInfo.SampleRate == 8000) {
 8000400:	4b5e      	ldr	r3, [pc, #376]	; (800057c <play+0x1ac>)
 8000402:	69db      	ldr	r3, [r3, #28]
 8000404:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000408:	d106      	bne.n	8000418 <play+0x48>
			TIM4->PSC = 72-1;
 800040a:	4b5d      	ldr	r3, [pc, #372]	; (8000580 <play+0x1b0>)
 800040c:	2247      	movs	r2, #71	; 0x47
 800040e:	629a      	str	r2, [r3, #40]	; 0x28
			TIM4->ARR = 125-1;
 8000410:	4b5b      	ldr	r3, [pc, #364]	; (8000580 <play+0x1b0>)
 8000412:	227c      	movs	r2, #124	; 0x7c
 8000414:	62da      	str	r2, [r3, #44]	; 0x2c
 8000416:	e031      	b.n	800047c <play+0xac>
		}
		else if(headerInfo.SampleRate == 11025) {
 8000418:	4b58      	ldr	r3, [pc, #352]	; (800057c <play+0x1ac>)
 800041a:	69db      	ldr	r3, [r3, #28]
 800041c:	f642 3211 	movw	r2, #11025	; 0x2b11
 8000420:	4293      	cmp	r3, r2
 8000422:	d106      	bne.n	8000432 <play+0x62>
			TIM4->PSC = 72-1;
 8000424:	4b56      	ldr	r3, [pc, #344]	; (8000580 <play+0x1b0>)
 8000426:	2247      	movs	r2, #71	; 0x47
 8000428:	629a      	str	r2, [r3, #40]	; 0x28
			TIM4->ARR = 91-1;
 800042a:	4b55      	ldr	r3, [pc, #340]	; (8000580 <play+0x1b0>)
 800042c:	225a      	movs	r2, #90	; 0x5a
 800042e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000430:	e024      	b.n	800047c <play+0xac>
		}
		else if(headerInfo.SampleRate == 16000) {
 8000432:	4b52      	ldr	r3, [pc, #328]	; (800057c <play+0x1ac>)
 8000434:	69db      	ldr	r3, [r3, #28]
 8000436:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800043a:	d106      	bne.n	800044a <play+0x7a>
			TIM4->PSC = 36-1;
 800043c:	4b50      	ldr	r3, [pc, #320]	; (8000580 <play+0x1b0>)
 800043e:	2223      	movs	r2, #35	; 0x23
 8000440:	629a      	str	r2, [r3, #40]	; 0x28
			TIM4->ARR = 125-1;
 8000442:	4b4f      	ldr	r3, [pc, #316]	; (8000580 <play+0x1b0>)
 8000444:	227c      	movs	r2, #124	; 0x7c
 8000446:	62da      	str	r2, [r3, #44]	; 0x2c
 8000448:	e018      	b.n	800047c <play+0xac>
		}
		else if(headerInfo.SampleRate == 22050) {
 800044a:	4b4c      	ldr	r3, [pc, #304]	; (800057c <play+0x1ac>)
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	f245 6222 	movw	r2, #22050	; 0x5622
 8000452:	4293      	cmp	r3, r2
 8000454:	d107      	bne.n	8000466 <play+0x96>
			TIM4->PSC = 9-1;
 8000456:	4b4a      	ldr	r3, [pc, #296]	; (8000580 <play+0x1b0>)
 8000458:	2208      	movs	r2, #8
 800045a:	629a      	str	r2, [r3, #40]	; 0x28
			TIM4->ARR = 363-1;
 800045c:	4b48      	ldr	r3, [pc, #288]	; (8000580 <play+0x1b0>)
 800045e:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8000462:	62da      	str	r2, [r3, #44]	; 0x2c
 8000464:	e00a      	b.n	800047c <play+0xac>
		}
		else if(headerInfo.SampleRate == 32000) {
 8000466:	4b45      	ldr	r3, [pc, #276]	; (800057c <play+0x1ac>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800046e:	d105      	bne.n	800047c <play+0xac>
			TIM4->PSC = 9-1;
 8000470:	4b43      	ldr	r3, [pc, #268]	; (8000580 <play+0x1b0>)
 8000472:	2208      	movs	r2, #8
 8000474:	629a      	str	r2, [r3, #40]	; 0x28
			TIM4->ARR = 250-1;
 8000476:	4b42      	ldr	r3, [pc, #264]	; (8000580 <play+0x1b0>)
 8000478:	22f9      	movs	r2, #249	; 0xf9
 800047a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		if(headerInfo.SampleRate == 44100){
 800047c:	4b3f      	ldr	r3, [pc, #252]	; (800057c <play+0x1ac>)
 800047e:	69db      	ldr	r3, [r3, #28]
 8000480:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000484:	4293      	cmp	r3, r2
 8000486:	d106      	bne.n	8000496 <play+0xc6>
			TIM4->PSC = 9-1;
 8000488:	4b3d      	ldr	r3, [pc, #244]	; (8000580 <play+0x1b0>)
 800048a:	2208      	movs	r2, #8
 800048c:	629a      	str	r2, [r3, #40]	; 0x28
			TIM4->ARR = 181-1;
 800048e:	4b3c      	ldr	r3, [pc, #240]	; (8000580 <play+0x1b0>)
 8000490:	22b4      	movs	r2, #180	; 0xb4
 8000492:	62da      	str	r2, [r3, #44]	; 0x2c
 8000494:	e00b      	b.n	80004ae <play+0xde>
		}
		else if(headerInfo.SampleRate == 48000) {
 8000496:	4b39      	ldr	r3, [pc, #228]	; (800057c <play+0x1ac>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800049e:	4293      	cmp	r3, r2
 80004a0:	d105      	bne.n	80004ae <play+0xde>
			TIM4->PSC = 9-1;
 80004a2:	4b37      	ldr	r3, [pc, #220]	; (8000580 <play+0x1b0>)
 80004a4:	2208      	movs	r2, #8
 80004a6:	629a      	str	r2, [r3, #40]	; 0x28
			TIM4->ARR = 166-1;
 80004a8:	4b35      	ldr	r3, [pc, #212]	; (8000580 <play+0x1b0>)
 80004aa:	22a5      	movs	r2, #165	; 0xa5
 80004ac:	62da      	str	r2, [r3, #44]	; 0x2c



	/*****************************get data***************************/

	if(NumOfBLOCK == 0)
 80004ae:	4b2f      	ldr	r3, [pc, #188]	; (800056c <play+0x19c>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d114      	bne.n	80004e0 <play+0x110>
	{
		HAL_UART_Receive_DMA(&huart1, Wave[fp], BLOCK);
 80004b6:	4b33      	ldr	r3, [pc, #204]	; (8000584 <play+0x1b4>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	031b      	lsls	r3, r3, #12
 80004be:	4a32      	ldr	r2, [pc, #200]	; (8000588 <play+0x1b8>)
 80004c0:	4413      	add	r3, r2
 80004c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004c6:	4619      	mov	r1, r3
 80004c8:	482a      	ldr	r0, [pc, #168]	; (8000574 <play+0x1a4>)
 80004ca:	f003 f848 	bl	800355e <HAL_UART_Receive_DMA>
		HAL_UART_Transmit(&huart1, (uint8_t *)"A", 1, 10);
 80004ce:	230a      	movs	r3, #10
 80004d0:	2201      	movs	r2, #1
 80004d2:	492e      	ldr	r1, [pc, #184]	; (800058c <play+0x1bc>)
 80004d4:	4827      	ldr	r0, [pc, #156]	; (8000574 <play+0x1a4>)
 80004d6:	f002 ffb0 	bl	800343a <HAL_UART_Transmit>

		HAL_Delay(100);
 80004da:	2064      	movs	r0, #100	; 0x64
 80004dc:	f000 feb0 	bl	8001240 <HAL_Delay>
	}

	fp = 1-fp;
 80004e0:	4b28      	ldr	r3, [pc, #160]	; (8000584 <play+0x1b4>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	f1c3 0301 	rsb	r3, r3, #1
 80004ea:	b2da      	uxtb	r2, r3
 80004ec:	4b25      	ldr	r3, [pc, #148]	; (8000584 <play+0x1b4>)
 80004ee:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_DMA(&huart1, Wave[fp], BLOCK);
 80004f0:	4b24      	ldr	r3, [pc, #144]	; (8000584 <play+0x1b4>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	031b      	lsls	r3, r3, #12
 80004f8:	4a23      	ldr	r2, [pc, #140]	; (8000588 <play+0x1b8>)
 80004fa:	4413      	add	r3, r2
 80004fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000500:	4619      	mov	r1, r3
 8000502:	481c      	ldr	r0, [pc, #112]	; (8000574 <play+0x1a4>)
 8000504:	f003 f82b 	bl	800355e <HAL_UART_Receive_DMA>
	HAL_UART_Transmit(&huart1, (uint8_t *)"A", 1, 10);
 8000508:	230a      	movs	r3, #10
 800050a:	2201      	movs	r2, #1
 800050c:	491f      	ldr	r1, [pc, #124]	; (800058c <play+0x1bc>)
 800050e:	4819      	ldr	r0, [pc, #100]	; (8000574 <play+0x1a4>)
 8000510:	f002 ff93 	bl	800343a <HAL_UART_Transmit>


	/**************************convert data to PWM*******************/

	TIM_CCxChannelCmd(TIM2, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8000514:	2201      	movs	r2, #1
 8000516:	2100      	movs	r1, #0
 8000518:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800051c:	f002 febe 	bl	800329c <TIM_CCxChannelCmd>
	HAL_DMA_Start_IT(&hdma_tim4_ch1, (uint32_t)Right[1-fp], (uint32_t) &(TIM2->CCR1), BLOCK/2);
 8000520:	4b18      	ldr	r3, [pc, #96]	; (8000584 <play+0x1b4>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	b2db      	uxtb	r3, r3
 8000526:	f1c3 0301 	rsb	r3, r3, #1
 800052a:	02db      	lsls	r3, r3, #11
 800052c:	4a18      	ldr	r2, [pc, #96]	; (8000590 <play+0x1c0>)
 800052e:	4413      	add	r3, r2
 8000530:	4619      	mov	r1, r3
 8000532:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000536:	4a17      	ldr	r2, [pc, #92]	; (8000594 <play+0x1c4>)
 8000538:	4817      	ldr	r0, [pc, #92]	; (8000598 <play+0x1c8>)
 800053a:	f001 f80b 	bl	8001554 <HAL_DMA_Start_IT>
	TIM_CCxChannelCmd(TIM2, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800053e:	2201      	movs	r2, #1
 8000540:	2104      	movs	r1, #4
 8000542:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000546:	f002 fea9 	bl	800329c <TIM_CCxChannelCmd>
	HAL_DMA_Start_IT(&hdma_tim4_ch2, (uint32_t)Left[1-fp], (uint32_t) &(TIM2->CCR2), BLOCK/2);
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <play+0x1b4>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	b2db      	uxtb	r3, r3
 8000550:	f1c3 0301 	rsb	r3, r3, #1
 8000554:	02db      	lsls	r3, r3, #11
 8000556:	4a11      	ldr	r2, [pc, #68]	; (800059c <play+0x1cc>)
 8000558:	4413      	add	r3, r2
 800055a:	4619      	mov	r1, r3
 800055c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000560:	4a0f      	ldr	r2, [pc, #60]	; (80005a0 <play+0x1d0>)
 8000562:	4810      	ldr	r0, [pc, #64]	; (80005a4 <play+0x1d4>)
 8000564:	f000 fff6 	bl	8001554 <HAL_DMA_Start_IT>

}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000030 	.word	0x20000030
 8000570:	08004110 	.word	0x08004110
 8000574:	20002108 	.word	0x20002108
 8000578:	20004208 	.word	0x20004208
 800057c:	2000214c 	.word	0x2000214c
 8000580:	40000800 	.word	0x40000800
 8000584:	2000002c 	.word	0x2000002c
 8000588:	2000217c 	.word	0x2000217c
 800058c:	08004108 	.word	0x08004108
 8000590:	2000007c 	.word	0x2000007c
 8000594:	40000034 	.word	0x40000034
 8000598:	200041c4 	.word	0x200041c4
 800059c:	200010c4 	.word	0x200010c4
 80005a0:	40000038 	.word	0x40000038
 80005a4:	20000038 	.word	0x20000038

080005a8 <pause>:

void pause(void){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0

	//HAL_UART_DMAStop(&huart1);
	TIM_CCxChannelCmd(TIM2, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2100      	movs	r1, #0
 80005b0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80005b4:	f002 fe72 	bl	800329c <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(TIM2, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2104      	movs	r1, #4
 80005bc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80005c0:	f002 fe6c 	bl	800329c <TIM_CCxChannelCmd>
	HAL_DMA_Abort(&hdma_tim4_ch1);
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <pause+0x2c>)
 80005c6:	f001 f824 	bl	8001612 <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim4_ch2);
 80005ca:	4803      	ldr	r0, [pc, #12]	; (80005d8 <pause+0x30>)
 80005cc:	f001 f821 	bl	8001612 <HAL_DMA_Abort>
}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200041c4 	.word	0x200041c4
 80005d8:	20000038 	.word	0x20000038

080005dc <Next>:

void Next(void){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
	btn_flag=1;
 80005e2:	4b21      	ldr	r3, [pc, #132]	; (8000668 <Next+0x8c>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *)"N", 1, 100);
 80005e8:	2364      	movs	r3, #100	; 0x64
 80005ea:	2201      	movs	r2, #1
 80005ec:	491f      	ldr	r1, [pc, #124]	; (800066c <Next+0x90>)
 80005ee:	4820      	ldr	r0, [pc, #128]	; (8000670 <Next+0x94>)
 80005f0:	f002 ff23 	bl	800343a <HAL_UART_Transmit>


	HAL_Delay(100);
 80005f4:	2064      	movs	r0, #100	; 0x64
 80005f6:	f000 fe23 	bl	8001240 <HAL_Delay>

	for(int x=0 ;x<BLOCK ;x++){
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	e014      	b.n	800062a <Next+0x4e>
		Wave[0][x] = Wave[1][x] = 128; // bitRate/2
 8000600:	4a1c      	ldr	r2, [pc, #112]	; (8000674 <Next+0x98>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4413      	add	r3, r2
 8000606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800060a:	2280      	movs	r2, #128	; 0x80
 800060c:	701a      	strb	r2, [r3, #0]
 800060e:	4a19      	ldr	r2, [pc, #100]	; (8000674 <Next+0x98>)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4413      	add	r3, r2
 8000614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000618:	7819      	ldrb	r1, [r3, #0]
 800061a:	4a16      	ldr	r2, [pc, #88]	; (8000674 <Next+0x98>)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4413      	add	r3, r2
 8000620:	460a      	mov	r2, r1
 8000622:	701a      	strb	r2, [r3, #0]
	for(int x=0 ;x<BLOCK ;x++){
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	3301      	adds	r3, #1
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000630:	dbe6      	blt.n	8000600 <Next+0x24>
	}

	TIM_CCxChannelCmd(TIM2, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8000632:	2200      	movs	r2, #0
 8000634:	2100      	movs	r1, #0
 8000636:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800063a:	f002 fe2f 	bl	800329c <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(TIM2, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800063e:	2200      	movs	r2, #0
 8000640:	2104      	movs	r1, #4
 8000642:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000646:	f002 fe29 	bl	800329c <TIM_CCxChannelCmd>
	HAL_DMA_Abort(&hdma_tim4_ch1);
 800064a:	480b      	ldr	r0, [pc, #44]	; (8000678 <Next+0x9c>)
 800064c:	f000 ffe1 	bl	8001612 <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim4_ch2);
 8000650:	480a      	ldr	r0, [pc, #40]	; (800067c <Next+0xa0>)
 8000652:	f000 ffde 	bl	8001612 <HAL_DMA_Abort>

	NumOfBLOCK=0;
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <Next+0xa4>)
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
	play();
 800065c:	f7ff feb8 	bl	80003d0 <play>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000000 	.word	0x20000000
 800066c:	08004114 	.word	0x08004114
 8000670:	20002108 	.word	0x20002108
 8000674:	2000217c 	.word	0x2000217c
 8000678:	200041c4 	.word	0x200041c4
 800067c:	20000038 	.word	0x20000038
 8000680:	20000030 	.word	0x20000030

08000684 <Preview>:

void Preview(void){
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
	btn_flag=1;
 800068a:	4b21      	ldr	r3, [pc, #132]	; (8000710 <Preview+0x8c>)
 800068c:	2201      	movs	r2, #1
 800068e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *)"P", 1, 100);
 8000690:	2364      	movs	r3, #100	; 0x64
 8000692:	2201      	movs	r2, #1
 8000694:	491f      	ldr	r1, [pc, #124]	; (8000714 <Preview+0x90>)
 8000696:	4820      	ldr	r0, [pc, #128]	; (8000718 <Preview+0x94>)
 8000698:	f002 fecf 	bl	800343a <HAL_UART_Transmit>


	HAL_Delay(100);
 800069c:	2064      	movs	r0, #100	; 0x64
 800069e:	f000 fdcf 	bl	8001240 <HAL_Delay>

	for(int x=0 ;x<BLOCK ;x++){
 80006a2:	2300      	movs	r3, #0
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	e014      	b.n	80006d2 <Preview+0x4e>
		Wave[0][x] = Wave[1][x] = 128; // bitRate/2
 80006a8:	4a1c      	ldr	r2, [pc, #112]	; (800071c <Preview+0x98>)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4413      	add	r3, r2
 80006ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006b2:	2280      	movs	r2, #128	; 0x80
 80006b4:	701a      	strb	r2, [r3, #0]
 80006b6:	4a19      	ldr	r2, [pc, #100]	; (800071c <Preview+0x98>)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4413      	add	r3, r2
 80006bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006c0:	7819      	ldrb	r1, [r3, #0]
 80006c2:	4a16      	ldr	r2, [pc, #88]	; (800071c <Preview+0x98>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4413      	add	r3, r2
 80006c8:	460a      	mov	r2, r1
 80006ca:	701a      	strb	r2, [r3, #0]
	for(int x=0 ;x<BLOCK ;x++){
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	3301      	adds	r3, #1
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006d8:	dbe6      	blt.n	80006a8 <Preview+0x24>
	}

	TIM_CCxChannelCmd(TIM2, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80006da:	2200      	movs	r2, #0
 80006dc:	2100      	movs	r1, #0
 80006de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80006e2:	f002 fddb 	bl	800329c <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(TIM2, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2104      	movs	r1, #4
 80006ea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80006ee:	f002 fdd5 	bl	800329c <TIM_CCxChannelCmd>
	HAL_DMA_Abort(&hdma_tim4_ch1);
 80006f2:	480b      	ldr	r0, [pc, #44]	; (8000720 <Preview+0x9c>)
 80006f4:	f000 ff8d 	bl	8001612 <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim4_ch2);
 80006f8:	480a      	ldr	r0, [pc, #40]	; (8000724 <Preview+0xa0>)
 80006fa:	f000 ff8a 	bl	8001612 <HAL_DMA_Abort>

	NumOfBLOCK=0;
 80006fe:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <Preview+0xa4>)
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
	play();
 8000704:	f7ff fe64 	bl	80003d0 <play>
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000000 	.word	0x20000000
 8000714:	08004118 	.word	0x08004118
 8000718:	20002108 	.word	0x20002108
 800071c:	2000217c 	.word	0x2000217c
 8000720:	200041c4 	.word	0x200041c4
 8000724:	20000038 	.word	0x20000038
 8000728:	20000030 	.word	0x20000030

0800072c <clearBuff>:

void clearBuff(void){
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
	for(int x=0 ;x<BLOCK ;x++){
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	e014      	b.n	8000762 <clearBuff+0x36>
		Wave[0][x] = Wave[1][x] = 128;
 8000738:	4a0e      	ldr	r2, [pc, #56]	; (8000774 <clearBuff+0x48>)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4413      	add	r3, r2
 800073e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000742:	2280      	movs	r2, #128	; 0x80
 8000744:	701a      	strb	r2, [r3, #0]
 8000746:	4a0b      	ldr	r2, [pc, #44]	; (8000774 <clearBuff+0x48>)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4413      	add	r3, r2
 800074c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000750:	7819      	ldrb	r1, [r3, #0]
 8000752:	4a08      	ldr	r2, [pc, #32]	; (8000774 <clearBuff+0x48>)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4413      	add	r3, r2
 8000758:	460a      	mov	r2, r1
 800075a:	701a      	strb	r2, [r3, #0]
	for(int x=0 ;x<BLOCK ;x++){
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3301      	adds	r3, #1
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000768:	dbe6      	blt.n	8000738 <clearBuff+0xc>
	}
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr
 8000774:	2000217c 	.word	0x2000217c

08000778 <GetHeaderInfo>:

void GetHeaderInfo(WavHeader_typedef *Out_WavHeaderInfo ,uint8_t *pInput){
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]

	Out_WavHeaderInfo->RIFF_ID[0] = WaveHeaderbuff[0];
 8000782:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <GetHeaderInfo+0x80>)
 8000784:	781a      	ldrb	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	701a      	strb	r2, [r3, #0]
	Out_WavHeaderInfo->RIFF_ID[1] = WaveHeaderbuff[1];
 800078a:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <GetHeaderInfo+0x80>)
 800078c:	785a      	ldrb	r2, [r3, #1]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	705a      	strb	r2, [r3, #1]
	Out_WavHeaderInfo->RIFF_ID[2] = WaveHeaderbuff[2];
 8000792:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <GetHeaderInfo+0x80>)
 8000794:	789a      	ldrb	r2, [r3, #2]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	709a      	strb	r2, [r3, #2]
	Out_WavHeaderInfo->RIFF_ID[3] = WaveHeaderbuff[3];
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <GetHeaderInfo+0x80>)
 800079c:	78da      	ldrb	r2, [r3, #3]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	70da      	strb	r2, [r3, #3]

	//...

	Out_WavHeaderInfo->SampleRate = (WaveHeaderbuff[24])+
 80007a2:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <GetHeaderInfo+0x80>)
 80007a4:	7e1b      	ldrb	r3, [r3, #24]
 80007a6:	461a      	mov	r2, r3
			((WaveHeaderbuff[25]) << 8) +
 80007a8:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <GetHeaderInfo+0x80>)
 80007aa:	7e5b      	ldrb	r3, [r3, #25]
 80007ac:	021b      	lsls	r3, r3, #8
	Out_WavHeaderInfo->SampleRate = (WaveHeaderbuff[24])+
 80007ae:	441a      	add	r2, r3
			((WaveHeaderbuff[26]) << 16) +
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <GetHeaderInfo+0x80>)
 80007b2:	7e9b      	ldrb	r3, [r3, #26]
 80007b4:	041b      	lsls	r3, r3, #16
			((WaveHeaderbuff[25]) << 8) +
 80007b6:	441a      	add	r2, r3
			((WaveHeaderbuff[27]) << 24) ;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <GetHeaderInfo+0x80>)
 80007ba:	7edb      	ldrb	r3, [r3, #27]
 80007bc:	061b      	lsls	r3, r3, #24
			((WaveHeaderbuff[26]) << 16) +
 80007be:	441a      	add	r2, r3
	Out_WavHeaderInfo->SampleRate = (WaveHeaderbuff[24])+
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	61da      	str	r2, [r3, #28]

	//...

	Out_WavHeaderInfo->DATA_SZ = (WaveHeaderbuff[40])+
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <GetHeaderInfo+0x80>)
 80007c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80007ca:	461a      	mov	r2, r3
			((WaveHeaderbuff[41]) << 8) +
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <GetHeaderInfo+0x80>)
 80007ce:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80007d2:	021b      	lsls	r3, r3, #8
	Out_WavHeaderInfo->DATA_SZ = (WaveHeaderbuff[40])+
 80007d4:	441a      	add	r2, r3
			((WaveHeaderbuff[42]) << 16) +
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <GetHeaderInfo+0x80>)
 80007d8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80007dc:	041b      	lsls	r3, r3, #16
			((WaveHeaderbuff[41]) << 8) +
 80007de:	441a      	add	r2, r3
			((WaveHeaderbuff[43]) << 24) ;
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <GetHeaderInfo+0x80>)
 80007e2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80007e6:	061b      	lsls	r3, r3, #24
			((WaveHeaderbuff[42]) << 16) +
 80007e8:	441a      	add	r2, r3
	Out_WavHeaderInfo->DATA_SZ = (WaveHeaderbuff[40])+
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	62da      	str	r2, [r3, #44]	; 0x2c

}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	20004208 	.word	0x20004208

080007fc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000800:	f000 fcbc 	bl	800117c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000804:	f000 f8d4 	bl	80009b0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000808:	f000 fa52 	bl	8000cb0 <MX_GPIO_Init>
	MX_DMA_Init();
 800080c:	f000 fa22 	bl	8000c54 <MX_DMA_Init>
	MX_TIM2_Init();
 8000810:	f000 f914 	bl	8000a3c <MX_TIM2_Init>
	MX_TIM4_Init();
 8000814:	f000 f976 	bl	8000b04 <MX_TIM4_Init>
	MX_USART1_UART_Init();
 8000818:	f000 f9f2 	bl	8000c00 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	//stereo
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800081c:	2100      	movs	r1, #0
 800081e:	4858      	ldr	r0, [pc, #352]	; (8000980 <main+0x184>)
 8000820:	f002 f84c 	bl	80028bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8000824:	2104      	movs	r1, #4
 8000826:	4856      	ldr	r0, [pc, #344]	; (8000980 <main+0x184>)
 8000828:	f002 f848 	bl	80028bc <HAL_TIM_PWM_Start>

	//just set before HAL_DMA_Start_IT function
	HAL_DMA_RegisterCallback(&hdma_tim4_ch1, HAL_DMA_XFER_CPLT_CB_ID, &MyEvent1);
 800082c:	4a55      	ldr	r2, [pc, #340]	; (8000984 <main+0x188>)
 800082e:	2100      	movs	r1, #0
 8000830:	4855      	ldr	r0, [pc, #340]	; (8000988 <main+0x18c>)
 8000832:	f001 f8a5 	bl	8001980 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(&hdma_tim4_ch2, HAL_DMA_XFER_CPLT_CB_ID, &MyEvent2);
 8000836:	4a55      	ldr	r2, [pc, #340]	; (800098c <main+0x190>)
 8000838:	2100      	movs	r1, #0
 800083a:	4855      	ldr	r0, [pc, #340]	; (8000990 <main+0x194>)
 800083c:	f001 f8a0 	bl	8001980 <HAL_DMA_RegisterCallback>

	HAL_DMA_RegisterCallback(&hdma_usart1_rx, HAL_DMA_XFER_CPLT_CB_ID, &MyEvent3);
 8000840:	4a54      	ldr	r2, [pc, #336]	; (8000994 <main+0x198>)
 8000842:	2100      	movs	r1, #0
 8000844:	4854      	ldr	r0, [pc, #336]	; (8000998 <main+0x19c>)
 8000846:	f001 f89b 	bl	8001980 <HAL_DMA_RegisterCallback>


	HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_1);
 800084a:	2100      	movs	r1, #0
 800084c:	4853      	ldr	r0, [pc, #332]	; (800099c <main+0x1a0>)
 800084e:	f001 ff43 	bl	80026d8 <HAL_TIM_OC_Start>
	HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_2);
 8000852:	2104      	movs	r1, #4
 8000854:	4851      	ldr	r0, [pc, #324]	; (800099c <main+0x1a0>)
 8000856:	f001 ff3f 	bl	80026d8 <HAL_TIM_OC_Start>
	__HAL_TIM_ENABLE_DMA(&htim4, TIM_DMA_CC1);
 800085a:	4b50      	ldr	r3, [pc, #320]	; (800099c <main+0x1a0>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	68da      	ldr	r2, [r3, #12]
 8000860:	4b4e      	ldr	r3, [pc, #312]	; (800099c <main+0x1a0>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000868:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htim4, TIM_DMA_CC2);
 800086a:	4b4c      	ldr	r3, [pc, #304]	; (800099c <main+0x1a0>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	68da      	ldr	r2, [r3, #12]
 8000870:	4b4a      	ldr	r3, [pc, #296]	; (800099c <main+0x1a0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000878:	60da      	str	r2, [r3, #12]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if(EndOffle_flag==1){
 800087a:	4b49      	ldr	r3, [pc, #292]	; (80009a0 <main+0x1a4>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	2b01      	cmp	r3, #1
 8000882:	d109      	bne.n	8000898 <main+0x9c>
			EndOffle_flag=0;
 8000884:	4b46      	ldr	r3, [pc, #280]	; (80009a0 <main+0x1a4>)
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
			Stop();
 800088a:	f7ff fd6b 	bl	8000364 <Stop>
			btn_flag = 3;
 800088e:	4b45      	ldr	r3, [pc, #276]	; (80009a4 <main+0x1a8>)
 8000890:	2203      	movs	r2, #3
 8000892:	701a      	strb	r2, [r3, #0]
			play();
 8000894:	f7ff fd9c 	bl	80003d0 <play>
		}


		//press Preview button => Preview
		if (HAL_GPIO_ReadPin(PREVIEW_GPIO_Port, PREVIEW_Pin) == GPIO_PIN_RESET) {
 8000898:	2102      	movs	r1, #2
 800089a:	4843      	ldr	r0, [pc, #268]	; (80009a8 <main+0x1ac>)
 800089c:	f001 fa40 	bl	8001d20 <HAL_GPIO_ReadPin>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d104      	bne.n	80008b0 <main+0xb4>

			Preview();
 80008a6:	f7ff feed 	bl	8000684 <Preview>

			HAL_Delay(200);
 80008aa:	20c8      	movs	r0, #200	; 0xc8
 80008ac:	f000 fcc8 	bl	8001240 <HAL_Delay>
		}


		//press Next button => Next
		if (HAL_GPIO_ReadPin(Next_GPIO_Port, Next_Pin) == GPIO_PIN_RESET) {
 80008b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008b4:	483c      	ldr	r0, [pc, #240]	; (80009a8 <main+0x1ac>)
 80008b6:	f001 fa33 	bl	8001d20 <HAL_GPIO_ReadPin>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d104      	bne.n	80008ca <main+0xce>

			Next();
 80008c0:	f7ff fe8c 	bl	80005dc <Next>

			HAL_Delay(200);
 80008c4:	20c8      	movs	r0, #200	; 0xc8
 80008c6:	f000 fcbb 	bl	8001240 <HAL_Delay>
		}



		//press STOP button => STOP
		if (HAL_GPIO_ReadPin(STOP_GPIO_Port, STOP_Pin) == GPIO_PIN_RESET) {
 80008ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ce:	4836      	ldr	r0, [pc, #216]	; (80009a8 <main+0x1ac>)
 80008d0:	f001 fa26 	bl	8001d20 <HAL_GPIO_ReadPin>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d104      	bne.n	80008e4 <main+0xe8>

			Stop();
 80008da:	f7ff fd43 	bl	8000364 <Stop>

			HAL_Delay(200);
 80008de:	20c8      	movs	r0, #200	; 0xc8
 80008e0:	f000 fcae 	bl	8001240 <HAL_Delay>
		}



		//press Play/Pause button => Play
		if (HAL_GPIO_ReadPin(PLAY_GPIO_Port, PLAY_Pin) == GPIO_PIN_RESET && btn_flag == 1) {
 80008e4:	2140      	movs	r1, #64	; 0x40
 80008e6:	4831      	ldr	r0, [pc, #196]	; (80009ac <main+0x1b0>)
 80008e8:	f001 fa1a 	bl	8001d20 <HAL_GPIO_ReadPin>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d10c      	bne.n	800090c <main+0x110>
 80008f2:	4b2c      	ldr	r3, [pc, #176]	; (80009a4 <main+0x1a8>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d107      	bne.n	800090c <main+0x110>

			btn_flag = 2;
 80008fc:	4b29      	ldr	r3, [pc, #164]	; (80009a4 <main+0x1a8>)
 80008fe:	2202      	movs	r2, #2
 8000900:	701a      	strb	r2, [r3, #0]
			play();
 8000902:	f7ff fd65 	bl	80003d0 <play>

			HAL_Delay(200);
 8000906:	20c8      	movs	r0, #200	; 0xc8
 8000908:	f000 fc9a 	bl	8001240 <HAL_Delay>
		}


		//press Play/Pause button => Pause
		if(HAL_GPIO_ReadPin(PLAY_GPIO_Port, PLAY_Pin) == GPIO_PIN_RESET && btn_flag == 3){
 800090c:	2140      	movs	r1, #64	; 0x40
 800090e:	4827      	ldr	r0, [pc, #156]	; (80009ac <main+0x1b0>)
 8000910:	f001 fa06 	bl	8001d20 <HAL_GPIO_ReadPin>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d10c      	bne.n	8000934 <main+0x138>
 800091a:	4b22      	ldr	r3, [pc, #136]	; (80009a4 <main+0x1a8>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	b2db      	uxtb	r3, r3
 8000920:	2b03      	cmp	r3, #3
 8000922:	d107      	bne.n	8000934 <main+0x138>

			btn_flag = 4;
 8000924:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <main+0x1a8>)
 8000926:	2204      	movs	r2, #4
 8000928:	701a      	strb	r2, [r3, #0]
			pause();
 800092a:	f7ff fe3d 	bl	80005a8 <pause>

			HAL_Delay(200);
 800092e:	20c8      	movs	r0, #200	; 0xc8
 8000930:	f000 fc86 	bl	8001240 <HAL_Delay>
		}


		//release Play/Pause button
		if (HAL_GPIO_ReadPin(PLAY_GPIO_Port, PLAY_Pin) == GPIO_PIN_SET && (btn_flag == 2 || btn_flag == 4)){
 8000934:	2140      	movs	r1, #64	; 0x40
 8000936:	481d      	ldr	r0, [pc, #116]	; (80009ac <main+0x1b0>)
 8000938:	f001 f9f2 	bl	8001d20 <HAL_GPIO_ReadPin>
 800093c:	4603      	mov	r3, r0
 800093e:	2b01      	cmp	r3, #1
 8000940:	d19b      	bne.n	800087a <main+0x7e>
 8000942:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <main+0x1a8>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	b2db      	uxtb	r3, r3
 8000948:	2b02      	cmp	r3, #2
 800094a:	d004      	beq.n	8000956 <main+0x15a>
 800094c:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <main+0x1a8>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	2b04      	cmp	r3, #4
 8000954:	d191      	bne.n	800087a <main+0x7e>

			//now play
			if(btn_flag == 2)
 8000956:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <main+0x1a8>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	b2db      	uxtb	r3, r3
 800095c:	2b02      	cmp	r3, #2
 800095e:	d103      	bne.n	8000968 <main+0x16c>
				btn_flag = 3;
 8000960:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <main+0x1a8>)
 8000962:	2203      	movs	r2, #3
 8000964:	701a      	strb	r2, [r3, #0]
 8000966:	e007      	b.n	8000978 <main+0x17c>
			//now pause
			else if(btn_flag == 4)
 8000968:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <main+0x1a8>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	b2db      	uxtb	r3, r3
 800096e:	2b04      	cmp	r3, #4
 8000970:	d102      	bne.n	8000978 <main+0x17c>
				btn_flag = 1;
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <main+0x1a8>)
 8000974:	2201      	movs	r2, #1
 8000976:	701a      	strb	r2, [r3, #0]

			HAL_Delay(200);
 8000978:	20c8      	movs	r0, #200	; 0xc8
 800097a:	f000 fc61 	bl	8001240 <HAL_Delay>
		if(EndOffle_flag==1){
 800097e:	e77c      	b.n	800087a <main+0x7e>
 8000980:	2000417c 	.word	0x2000417c
 8000984:	0800014d 	.word	0x0800014d
 8000988:	200041c4 	.word	0x200041c4
 800098c:	080002ad 	.word	0x080002ad
 8000990:	20000038 	.word	0x20000038
 8000994:	080002c1 	.word	0x080002c1
 8000998:	200020c4 	.word	0x200020c4
 800099c:	2000107c 	.word	0x2000107c
 80009a0:	20000034 	.word	0x20000034
 80009a4:	20000000 	.word	0x20000000
 80009a8:	40010c00 	.word	0x40010c00
 80009ac:	40010800 	.word	0x40010800

080009b0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b090      	sub	sp, #64	; 0x40
 80009b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b6:	f107 0318 	add.w	r3, r7, #24
 80009ba:	2228      	movs	r2, #40	; 0x28
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f003 fb8e 	bl	80040e0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d2:	2301      	movs	r3, #1
 80009d4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009da:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e0:	2301      	movs	r3, #1
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e4:	2302      	movs	r3, #2
 80009e6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ec:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009ee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f4:	f107 0318 	add.w	r3, r7, #24
 80009f8:	4618      	mov	r0, r3
 80009fa:	f001 f9a9 	bl	8001d50 <HAL_RCC_OscConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0x58>
	{
		Error_Handler();
 8000a04:	f000 f9a6 	bl	8000d54 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a08:	230f      	movs	r3, #15
 8000a0a:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a18:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2102      	movs	r1, #2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f001 fc14 	bl	8002250 <HAL_RCC_ClockConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0x82>
	{
		Error_Handler();
 8000a2e:	f000 f991 	bl	8000d54 <Error_Handler>
	}
}
 8000a32:	bf00      	nop
 8000a34:	3740      	adds	r7, #64	; 0x40
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	; 0x28
 8000a40:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a42:	f107 0320 	add.w	r3, r7, #32
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]
 8000a5a:	615a      	str	r2, [r3, #20]
 8000a5c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000a5e:	4b28      	ldr	r3, [pc, #160]	; (8000b00 <MX_TIM2_Init+0xc4>)
 8000a60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a64:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000a66:	4b26      	ldr	r3, [pc, #152]	; (8000b00 <MX_TIM2_Init+0xc4>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6c:	4b24      	ldr	r3, [pc, #144]	; (8000b00 <MX_TIM2_Init+0xc4>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 256;
 8000a72:	4b23      	ldr	r3, [pc, #140]	; (8000b00 <MX_TIM2_Init+0xc4>)
 8000a74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a78:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7a:	4b21      	ldr	r3, [pc, #132]	; (8000b00 <MX_TIM2_Init+0xc4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a80:	4b1f      	ldr	r3, [pc, #124]	; (8000b00 <MX_TIM2_Init+0xc4>)
 8000a82:	2280      	movs	r2, #128	; 0x80
 8000a84:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a86:	481e      	ldr	r0, [pc, #120]	; (8000b00 <MX_TIM2_Init+0xc4>)
 8000a88:	f001 fec8 	bl	800281c <HAL_TIM_PWM_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM2_Init+0x5a>
	{
		Error_Handler();
 8000a92:	f000 f95f 	bl	8000d54 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a9e:	f107 0320 	add.w	r3, r7, #32
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4816      	ldr	r0, [pc, #88]	; (8000b00 <MX_TIM2_Init+0xc4>)
 8000aa6:	f002 fc1d 	bl	80032e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM2_Init+0x78>
	{
		Error_Handler();
 8000ab0:	f000 f950 	bl	8000d54 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ab4:	2360      	movs	r3, #96	; 0x60
 8000ab6:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 128;
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	4619      	mov	r1, r3
 8000aca:	480d      	ldr	r0, [pc, #52]	; (8000b00 <MX_TIM2_Init+0xc4>)
 8000acc:	f001 fff0 	bl	8002ab0 <HAL_TIM_PWM_ConfigChannel>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM2_Init+0x9e>
	{
		Error_Handler();
 8000ad6:	f000 f93d 	bl	8000d54 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	2204      	movs	r2, #4
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4807      	ldr	r0, [pc, #28]	; (8000b00 <MX_TIM2_Init+0xc4>)
 8000ae2:	f001 ffe5 	bl	8002ab0 <HAL_TIM_PWM_ConfigChannel>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 8000aec:	f000 f932 	bl	8000d54 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000af0:	4803      	ldr	r0, [pc, #12]	; (8000b00 <MX_TIM2_Init+0xc4>)
 8000af2:	f000 f9f9 	bl	8000ee8 <HAL_TIM_MspPostInit>

}
 8000af6:	bf00      	nop
 8000af8:	3728      	adds	r7, #40	; 0x28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	2000417c 	.word	0x2000417c

08000b04 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08e      	sub	sp, #56	; 0x38
 8000b08:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b18:	f107 0320 	add.w	r3, r7, #32
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
 8000b30:	615a      	str	r2, [r3, #20]
 8000b32:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000b34:	4b30      	ldr	r3, [pc, #192]	; (8000bf8 <MX_TIM4_Init+0xf4>)
 8000b36:	4a31      	ldr	r2, [pc, #196]	; (8000bfc <MX_TIM4_Init+0xf8>)
 8000b38:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 72-1;
 8000b3a:	4b2f      	ldr	r3, [pc, #188]	; (8000bf8 <MX_TIM4_Init+0xf4>)
 8000b3c:	2247      	movs	r2, #71	; 0x47
 8000b3e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b40:	4b2d      	ldr	r3, [pc, #180]	; (8000bf8 <MX_TIM4_Init+0xf4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 181-1;
 8000b46:	4b2c      	ldr	r3, [pc, #176]	; (8000bf8 <MX_TIM4_Init+0xf4>)
 8000b48:	22b4      	movs	r2, #180	; 0xb4
 8000b4a:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b4c:	4b2a      	ldr	r3, [pc, #168]	; (8000bf8 <MX_TIM4_Init+0xf4>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b52:	4b29      	ldr	r3, [pc, #164]	; (8000bf8 <MX_TIM4_Init+0xf4>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b58:	4827      	ldr	r0, [pc, #156]	; (8000bf8 <MX_TIM4_Init+0xf4>)
 8000b5a:	f001 fd15 	bl	8002588 <HAL_TIM_Base_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM4_Init+0x64>
	{
		Error_Handler();
 8000b64:	f000 f8f6 	bl	8000d54 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b6c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b72:	4619      	mov	r1, r3
 8000b74:	4820      	ldr	r0, [pc, #128]	; (8000bf8 <MX_TIM4_Init+0xf4>)
 8000b76:	f002 f859 	bl	8002c2c <HAL_TIM_ConfigClockSource>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM4_Init+0x80>
	{
		Error_Handler();
 8000b80:	f000 f8e8 	bl	8000d54 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000b84:	481c      	ldr	r0, [pc, #112]	; (8000bf8 <MX_TIM4_Init+0xf4>)
 8000b86:	f001 fd4e 	bl	8002626 <HAL_TIM_OC_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM4_Init+0x90>
	{
		Error_Handler();
 8000b90:	f000 f8e0 	bl	8000d54 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b94:	2300      	movs	r3, #0
 8000b96:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b9c:	f107 0320 	add.w	r3, r7, #32
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4815      	ldr	r0, [pc, #84]	; (8000bf8 <MX_TIM4_Init+0xf4>)
 8000ba4:	f002 fb9e 	bl	80032e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM4_Init+0xae>
	{
		Error_Handler();
 8000bae:	f000 f8d1 	bl	8000d54 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	480b      	ldr	r0, [pc, #44]	; (8000bf8 <MX_TIM4_Init+0xf4>)
 8000bca:	f001 ff19 	bl	8002a00 <HAL_TIM_OC_ConfigChannel>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM4_Init+0xd4>
	{
		Error_Handler();
 8000bd4:	f000 f8be 	bl	8000d54 <Error_Handler>
	}
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	2204      	movs	r2, #4
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <MX_TIM4_Init+0xf4>)
 8000be0:	f001 ff0e 	bl	8002a00 <HAL_TIM_OC_ConfigChannel>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM4_Init+0xea>
	{
		Error_Handler();
 8000bea:	f000 f8b3 	bl	8000d54 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	3738      	adds	r7, #56	; 0x38
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	2000107c 	.word	0x2000107c
 8000bfc:	40000800 	.word	0x40000800

08000c00 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <MX_USART1_UART_Init+0x50>)
 8000c08:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 921600;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c0c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000c10:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c26:	220c      	movs	r2, #12
 8000c28:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c38:	f002 fbb2 	bl	80033a0 <HAL_UART_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8000c42:	f000 f887 	bl	8000d54 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20002108 	.word	0x20002108
 8000c50:	40013800 	.word	0x40013800

08000c54 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000c5a:	4b14      	ldr	r3, [pc, #80]	; (8000cac <MX_DMA_Init+0x58>)
 8000c5c:	695b      	ldr	r3, [r3, #20]
 8000c5e:	4a13      	ldr	r2, [pc, #76]	; (8000cac <MX_DMA_Init+0x58>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6153      	str	r3, [r2, #20]
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_DMA_Init+0x58>)
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	200b      	movs	r0, #11
 8000c78:	f000 fbdb 	bl	8001432 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c7c:	200b      	movs	r0, #11
 8000c7e:	f000 fbf4 	bl	800146a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2100      	movs	r1, #0
 8000c86:	200e      	movs	r0, #14
 8000c88:	f000 fbd3 	bl	8001432 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000c8c:	200e      	movs	r0, #14
 8000c8e:	f000 fbec 	bl	800146a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2100      	movs	r1, #0
 8000c96:	200f      	movs	r0, #15
 8000c98:	f000 fbcb 	bl	8001432 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000c9c:	200f      	movs	r0, #15
 8000c9e:	f000 fbe4 	bl	800146a <HAL_NVIC_EnableIRQ>

}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40021000 	.word	0x40021000

08000cb0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb6:	f107 0310 	add.w	r3, r7, #16
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc4:	4b20      	ldr	r3, [pc, #128]	; (8000d48 <MX_GPIO_Init+0x98>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	4a1f      	ldr	r2, [pc, #124]	; (8000d48 <MX_GPIO_Init+0x98>)
 8000cca:	f043 0320 	orr.w	r3, r3, #32
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <MX_GPIO_Init+0x98>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f003 0320 	and.w	r3, r3, #32
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <MX_GPIO_Init+0x98>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a19      	ldr	r2, [pc, #100]	; (8000d48 <MX_GPIO_Init+0x98>)
 8000ce2:	f043 0304 	orr.w	r3, r3, #4
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <MX_GPIO_Init+0x98>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0304 	and.w	r3, r3, #4
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf4:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <MX_GPIO_Init+0x98>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	4a13      	ldr	r2, [pc, #76]	; (8000d48 <MX_GPIO_Init+0x98>)
 8000cfa:	f043 0308 	orr.w	r3, r3, #8
 8000cfe:	6193      	str	r3, [r2, #24]
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <MX_GPIO_Init+0x98>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	f003 0308 	and.w	r3, r3, #8
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PLAY_Pin */
	GPIO_InitStruct.Pin = PLAY_Pin;
 8000d0c:	2340      	movs	r3, #64	; 0x40
 8000d0e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(PLAY_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 0310 	add.w	r3, r7, #16
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	480b      	ldr	r0, [pc, #44]	; (8000d4c <MX_GPIO_Init+0x9c>)
 8000d20:	f000 fea4 	bl	8001a6c <HAL_GPIO_Init>

	/*Configure GPIO pins : PREVIEW_Pin Next_Pin STOP_Pin */
	GPIO_InitStruct.Pin = PREVIEW_Pin|Next_Pin|STOP_Pin;
 8000d24:	f640 4302 	movw	r3, #3074	; 0xc02
 8000d28:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d32:	f107 0310 	add.w	r3, r7, #16
 8000d36:	4619      	mov	r1, r3
 8000d38:	4805      	ldr	r0, [pc, #20]	; (8000d50 <MX_GPIO_Init+0xa0>)
 8000d3a:	f000 fe97 	bl	8001a6c <HAL_GPIO_Init>

}
 8000d3e:	bf00      	nop
 8000d40:	3720      	adds	r7, #32
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40010800 	.word	0x40010800
 8000d50:	40010c00 	.word	0x40010c00

08000d54 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <HAL_MspInit+0x5c>)
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <HAL_MspInit+0x5c>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6193      	str	r3, [r2, #24]
 8000d72:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <HAL_MspInit+0x5c>)
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <HAL_MspInit+0x5c>)
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	4a0e      	ldr	r2, [pc, #56]	; (8000dbc <HAL_MspInit+0x5c>)
 8000d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d88:	61d3      	str	r3, [r2, #28]
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <HAL_MspInit+0x5c>)
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <HAL_MspInit+0x60>)
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <HAL_MspInit+0x60>)
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db2:	bf00      	nop
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	40010000 	.word	0x40010000

08000dc4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dd4:	d10b      	bne.n	8000dee <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <HAL_TIM_PWM_MspInit+0x34>)
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <HAL_TIM_PWM_MspInit+0x34>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	61d3      	str	r3, [r2, #28]
 8000de2:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <HAL_TIM_PWM_MspInit+0x34>)
 8000de4:	69db      	ldr	r3, [r3, #28]
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dee:	bf00      	nop
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	40021000 	.word	0x40021000

08000dfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a31      	ldr	r2, [pc, #196]	; (8000ed0 <HAL_TIM_Base_MspInit+0xd4>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d15b      	bne.n	8000ec6 <HAL_TIM_Base_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e0e:	4b31      	ldr	r3, [pc, #196]	; (8000ed4 <HAL_TIM_Base_MspInit+0xd8>)
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	4a30      	ldr	r2, [pc, #192]	; (8000ed4 <HAL_TIM_Base_MspInit+0xd8>)
 8000e14:	f043 0304 	orr.w	r3, r3, #4
 8000e18:	61d3      	str	r3, [r2, #28]
 8000e1a:	4b2e      	ldr	r3, [pc, #184]	; (8000ed4 <HAL_TIM_Base_MspInit+0xd8>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	f003 0304 	and.w	r3, r3, #4
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Channel1;
 8000e26:	4b2c      	ldr	r3, [pc, #176]	; (8000ed8 <HAL_TIM_Base_MspInit+0xdc>)
 8000e28:	4a2c      	ldr	r2, [pc, #176]	; (8000edc <HAL_TIM_Base_MspInit+0xe0>)
 8000e2a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e2c:	4b2a      	ldr	r3, [pc, #168]	; (8000ed8 <HAL_TIM_Base_MspInit+0xdc>)
 8000e2e:	2210      	movs	r2, #16
 8000e30:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e32:	4b29      	ldr	r3, [pc, #164]	; (8000ed8 <HAL_TIM_Base_MspInit+0xdc>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000e38:	4b27      	ldr	r3, [pc, #156]	; (8000ed8 <HAL_TIM_Base_MspInit+0xdc>)
 8000e3a:	2280      	movs	r2, #128	; 0x80
 8000e3c:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e3e:	4b26      	ldr	r3, [pc, #152]	; (8000ed8 <HAL_TIM_Base_MspInit+0xdc>)
 8000e40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e44:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e46:	4b24      	ldr	r3, [pc, #144]	; (8000ed8 <HAL_TIM_Base_MspInit+0xdc>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8000e4c:	4b22      	ldr	r3, [pc, #136]	; (8000ed8 <HAL_TIM_Base_MspInit+0xdc>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000e52:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <HAL_TIM_Base_MspInit+0xdc>)
 8000e54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e58:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8000e5a:	481f      	ldr	r0, [pc, #124]	; (8000ed8 <HAL_TIM_Base_MspInit+0xdc>)
 8000e5c:	f000 fb20 	bl	80014a0 <HAL_DMA_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8000e66:	f7ff ff75 	bl	8000d54 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a1a      	ldr	r2, [pc, #104]	; (8000ed8 <HAL_TIM_Base_MspInit+0xdc>)
 8000e6e:	625a      	str	r2, [r3, #36]	; 0x24
 8000e70:	4a19      	ldr	r2, [pc, #100]	; (8000ed8 <HAL_TIM_Base_MspInit+0xdc>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM4_CH2 Init */
    hdma_tim4_ch2.Instance = DMA1_Channel4;
 8000e76:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <HAL_TIM_Base_MspInit+0xe4>)
 8000e78:	4a1a      	ldr	r2, [pc, #104]	; (8000ee4 <HAL_TIM_Base_MspInit+0xe8>)
 8000e7a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e7c:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <HAL_TIM_Base_MspInit+0xe4>)
 8000e7e:	2210      	movs	r2, #16
 8000e80:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e82:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <HAL_TIM_Base_MspInit+0xe4>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000e88:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <HAL_TIM_Base_MspInit+0xe4>)
 8000e8a:	2280      	movs	r2, #128	; 0x80
 8000e8c:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <HAL_TIM_Base_MspInit+0xe4>)
 8000e90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e94:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e96:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <HAL_TIM_Base_MspInit+0xe4>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.Mode = DMA_NORMAL;
 8000e9c:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <HAL_TIM_Base_MspInit+0xe4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <HAL_TIM_Base_MspInit+0xe4>)
 8000ea4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ea8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 8000eaa:	480d      	ldr	r0, [pc, #52]	; (8000ee0 <HAL_TIM_Base_MspInit+0xe4>)
 8000eac:	f000 faf8 	bl	80014a0 <HAL_DMA_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_TIM_Base_MspInit+0xbe>
    {
      Error_Handler();
 8000eb6:	f7ff ff4d 	bl	8000d54 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a08      	ldr	r2, [pc, #32]	; (8000ee0 <HAL_TIM_Base_MspInit+0xe4>)
 8000ebe:	629a      	str	r2, [r3, #40]	; 0x28
 8000ec0:	4a07      	ldr	r2, [pc, #28]	; (8000ee0 <HAL_TIM_Base_MspInit+0xe4>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40000800 	.word	0x40000800
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	200041c4 	.word	0x200041c4
 8000edc:	40020008 	.word	0x40020008
 8000ee0:	20000038 	.word	0x20000038
 8000ee4:	40020044 	.word	0x40020044

08000ee8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 0310 	add.w	r3, r7, #16
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f06:	d117      	bne.n	8000f38 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f08:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <HAL_TIM_MspPostInit+0x58>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4a0c      	ldr	r2, [pc, #48]	; (8000f40 <HAL_TIM_MspPostInit+0x58>)
 8000f0e:	f043 0304 	orr.w	r3, r3, #4
 8000f12:	6193      	str	r3, [r2, #24]
 8000f14:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <HAL_TIM_MspPostInit+0x58>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	f003 0304 	and.w	r3, r3, #4
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f20:	2303      	movs	r3, #3
 8000f22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	4619      	mov	r1, r3
 8000f32:	4804      	ldr	r0, [pc, #16]	; (8000f44 <HAL_TIM_MspPostInit+0x5c>)
 8000f34:	f000 fd9a 	bl	8001a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f38:	bf00      	nop
 8000f3a:	3720      	adds	r7, #32
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40010800 	.word	0x40010800

08000f48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a34      	ldr	r2, [pc, #208]	; (8001034 <HAL_UART_MspInit+0xec>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d160      	bne.n	800102a <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f68:	4b33      	ldr	r3, [pc, #204]	; (8001038 <HAL_UART_MspInit+0xf0>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	4a32      	ldr	r2, [pc, #200]	; (8001038 <HAL_UART_MspInit+0xf0>)
 8000f6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f72:	6193      	str	r3, [r2, #24]
 8000f74:	4b30      	ldr	r3, [pc, #192]	; (8001038 <HAL_UART_MspInit+0xf0>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f80:	4b2d      	ldr	r3, [pc, #180]	; (8001038 <HAL_UART_MspInit+0xf0>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	4a2c      	ldr	r2, [pc, #176]	; (8001038 <HAL_UART_MspInit+0xf0>)
 8000f86:	f043 0304 	orr.w	r3, r3, #4
 8000f8a:	6193      	str	r3, [r2, #24]
 8000f8c:	4b2a      	ldr	r3, [pc, #168]	; (8001038 <HAL_UART_MspInit+0xf0>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	f003 0304 	and.w	r3, r3, #4
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa6:	f107 0310 	add.w	r3, r7, #16
 8000faa:	4619      	mov	r1, r3
 8000fac:	4823      	ldr	r0, [pc, #140]	; (800103c <HAL_UART_MspInit+0xf4>)
 8000fae:	f000 fd5d 	bl	8001a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	481d      	ldr	r0, [pc, #116]	; (800103c <HAL_UART_MspInit+0xf4>)
 8000fc8:	f000 fd50 	bl	8001a6c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000fcc:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <HAL_UART_MspInit+0xf8>)
 8000fce:	4a1d      	ldr	r2, [pc, #116]	; (8001044 <HAL_UART_MspInit+0xfc>)
 8000fd0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fd2:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <HAL_UART_MspInit+0xf8>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fd8:	4b19      	ldr	r3, [pc, #100]	; (8001040 <HAL_UART_MspInit+0xf8>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fde:	4b18      	ldr	r3, [pc, #96]	; (8001040 <HAL_UART_MspInit+0xf8>)
 8000fe0:	2280      	movs	r2, #128	; 0x80
 8000fe2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fe4:	4b16      	ldr	r3, [pc, #88]	; (8001040 <HAL_UART_MspInit+0xf8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_UART_MspInit+0xf8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000ff0:	4b13      	ldr	r3, [pc, #76]	; (8001040 <HAL_UART_MspInit+0xf8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ff6:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_UART_MspInit+0xf8>)
 8000ff8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000ffc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000ffe:	4810      	ldr	r0, [pc, #64]	; (8001040 <HAL_UART_MspInit+0xf8>)
 8001000:	f000 fa4e 	bl	80014a0 <HAL_DMA_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800100a:	f7ff fea3 	bl	8000d54 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a0b      	ldr	r2, [pc, #44]	; (8001040 <HAL_UART_MspInit+0xf8>)
 8001012:	639a      	str	r2, [r3, #56]	; 0x38
 8001014:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <HAL_UART_MspInit+0xf8>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2100      	movs	r1, #0
 800101e:	2025      	movs	r0, #37	; 0x25
 8001020:	f000 fa07 	bl	8001432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001024:	2025      	movs	r0, #37	; 0x25
 8001026:	f000 fa20 	bl	800146a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800102a:	bf00      	nop
 800102c:	3720      	adds	r7, #32
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40013800 	.word	0x40013800
 8001038:	40021000 	.word	0x40021000
 800103c:	40010800 	.word	0x40010800
 8001040:	200020c4 	.word	0x200020c4
 8001044:	40020058 	.word	0x40020058

08001048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <HardFault_Handler+0x4>

0800105a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <MemManage_Handler+0x4>

08001060 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <BusFault_Handler+0x4>

08001066 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <UsageFault_Handler+0x4>

0800106c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr

08001078 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001094:	f000 f8b8 	bl	8001208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}

0800109c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 80010a0:	4802      	ldr	r0, [pc, #8]	; (80010ac <DMA1_Channel1_IRQHandler+0x10>)
 80010a2:	f000 fb67 	bl	8001774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200041c4 	.word	0x200041c4

080010b0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 80010b4:	4802      	ldr	r0, [pc, #8]	; (80010c0 <DMA1_Channel4_IRQHandler+0x10>)
 80010b6:	f000 fb5d 	bl	8001774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000038 	.word	0x20000038

080010c4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80010c8:	4802      	ldr	r0, [pc, #8]	; (80010d4 <DMA1_Channel5_IRQHandler+0x10>)
 80010ca:	f000 fb53 	bl	8001774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200020c4 	.word	0x200020c4

080010d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010dc:	4802      	ldr	r0, [pc, #8]	; (80010e8 <USART1_IRQHandler+0x10>)
 80010de:	f002 fac9 	bl	8003674 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20002108 	.word	0x20002108

080010ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr

080010f8 <HAL_UART_TxCpltCallback>:
extern TIM_HandleTypeDef htim3;
extern DMA_HandleTypeDef hdma_tim4_ch1;



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART1){

	}
	UNUSED(huart);
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr

0800110a <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]

	}


	UNUSED(huart);
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr

0800111c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	if(huart ->Instance == USART1){

	}
	UNUSED(huart);

}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr
	...

08001130 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001130:	480c      	ldr	r0, [pc, #48]	; (8001164 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001132:	490d      	ldr	r1, [pc, #52]	; (8001168 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001134:	4a0d      	ldr	r2, [pc, #52]	; (800116c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001138:	e002      	b.n	8001140 <LoopCopyDataInit>

0800113a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800113c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113e:	3304      	adds	r3, #4

08001140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001144:	d3f9      	bcc.n	800113a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001146:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001148:	4c0a      	ldr	r4, [pc, #40]	; (8001174 <LoopFillZerobss+0x22>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800114c:	e001      	b.n	8001152 <LoopFillZerobss>

0800114e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001150:	3204      	adds	r2, #4

08001152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001154:	d3fb      	bcc.n	800114e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001156:	f7ff ffc9 	bl	80010ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800115a:	f002 ff9d 	bl	8004098 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800115e:	f7ff fb4d 	bl	80007fc <main>
  bx lr
 8001162:	4770      	bx	lr
  ldr r0, =_sdata
 8001164:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001168:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800116c:	08004150 	.word	0x08004150
  ldr r2, =_sbss
 8001170:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001174:	2000423c 	.word	0x2000423c

08001178 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001178:	e7fe      	b.n	8001178 <ADC1_2_IRQHandler>
	...

0800117c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <HAL_Init+0x28>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <HAL_Init+0x28>)
 8001186:	f043 0310 	orr.w	r3, r3, #16
 800118a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800118c:	2003      	movs	r0, #3
 800118e:	f000 f945 	bl	800141c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001192:	2000      	movs	r0, #0
 8001194:	f000 f808 	bl	80011a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001198:	f7ff fde2 	bl	8000d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40022000 	.word	0x40022000

080011a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <HAL_InitTick+0x54>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <HAL_InitTick+0x58>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	4619      	mov	r1, r3
 80011ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011be:	fbb3 f3f1 	udiv	r3, r3, r1
 80011c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 f95d 	bl	8001486 <HAL_SYSTICK_Config>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e00e      	b.n	80011f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b0f      	cmp	r3, #15
 80011da:	d80a      	bhi.n	80011f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011dc:	2200      	movs	r2, #0
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295
 80011e4:	f000 f925 	bl	8001432 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e8:	4a06      	ldr	r2, [pc, #24]	; (8001204 <HAL_InitTick+0x5c>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
 80011f0:	e000      	b.n	80011f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000004 	.word	0x20000004
 8001200:	2000000c 	.word	0x2000000c
 8001204:	20000008 	.word	0x20000008

08001208 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <HAL_IncTick+0x1c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	4b05      	ldr	r3, [pc, #20]	; (8001228 <HAL_IncTick+0x20>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4413      	add	r3, r2
 8001218:	4a03      	ldr	r2, [pc, #12]	; (8001228 <HAL_IncTick+0x20>)
 800121a:	6013      	str	r3, [r2, #0]
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr
 8001224:	2000000c 	.word	0x2000000c
 8001228:	20004238 	.word	0x20004238

0800122c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return uwTick;
 8001230:	4b02      	ldr	r3, [pc, #8]	; (800123c <HAL_GetTick+0x10>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	20004238 	.word	0x20004238

08001240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001248:	f7ff fff0 	bl	800122c <HAL_GetTick>
 800124c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001258:	d005      	beq.n	8001266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <HAL_Delay+0x40>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	461a      	mov	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4413      	add	r3, r2
 8001264:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001266:	bf00      	nop
 8001268:	f7ff ffe0 	bl	800122c <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	429a      	cmp	r2, r3
 8001276:	d8f7      	bhi.n	8001268 <HAL_Delay+0x28>
  {
  }
}
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	2000000c 	.word	0x2000000c

08001284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a0:	4013      	ands	r3, r2
 80012a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b6:	4a04      	ldr	r2, [pc, #16]	; (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	60d3      	str	r3, [r2, #12]
}
 80012bc:	bf00      	nop
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d0:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <__NVIC_GetPriorityGrouping+0x18>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	f003 0307 	and.w	r3, r3, #7
}
 80012da:	4618      	mov	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	db0b      	blt.n	8001312 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	f003 021f 	and.w	r2, r3, #31
 8001300:	4906      	ldr	r1, [pc, #24]	; (800131c <__NVIC_EnableIRQ+0x34>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	095b      	lsrs	r3, r3, #5
 8001308:	2001      	movs	r0, #1
 800130a:	fa00 f202 	lsl.w	r2, r0, r2
 800130e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr
 800131c:	e000e100 	.word	0xe000e100

08001320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	2b00      	cmp	r3, #0
 8001332:	db0a      	blt.n	800134a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	b2da      	uxtb	r2, r3
 8001338:	490c      	ldr	r1, [pc, #48]	; (800136c <__NVIC_SetPriority+0x4c>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	0112      	lsls	r2, r2, #4
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	440b      	add	r3, r1
 8001344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001348:	e00a      	b.n	8001360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4908      	ldr	r1, [pc, #32]	; (8001370 <__NVIC_SetPriority+0x50>)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	3b04      	subs	r3, #4
 8001358:	0112      	lsls	r2, r2, #4
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	440b      	add	r3, r1
 800135e:	761a      	strb	r2, [r3, #24]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000e100 	.word	0xe000e100
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001374:	b480      	push	{r7}
 8001376:	b089      	sub	sp, #36	; 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f1c3 0307 	rsb	r3, r3, #7
 800138e:	2b04      	cmp	r3, #4
 8001390:	bf28      	it	cs
 8001392:	2304      	movcs	r3, #4
 8001394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3304      	adds	r3, #4
 800139a:	2b06      	cmp	r3, #6
 800139c:	d902      	bls.n	80013a4 <NVIC_EncodePriority+0x30>
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3b03      	subs	r3, #3
 80013a2:	e000      	b.n	80013a6 <NVIC_EncodePriority+0x32>
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43da      	mvns	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	401a      	ands	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013bc:	f04f 31ff 	mov.w	r1, #4294967295
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	43d9      	mvns	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	4313      	orrs	r3, r2
         );
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3724      	adds	r7, #36	; 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr

080013d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013e8:	d301      	bcc.n	80013ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00f      	b.n	800140e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ee:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <SysTick_Config+0x40>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f6:	210f      	movs	r1, #15
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f7ff ff90 	bl	8001320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <SysTick_Config+0x40>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001406:	4b04      	ldr	r3, [pc, #16]	; (8001418 <SysTick_Config+0x40>)
 8001408:	2207      	movs	r2, #7
 800140a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	e000e010 	.word	0xe000e010

0800141c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff ff2d 	bl	8001284 <__NVIC_SetPriorityGrouping>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001432:	b580      	push	{r7, lr}
 8001434:	b086      	sub	sp, #24
 8001436:	af00      	add	r7, sp, #0
 8001438:	4603      	mov	r3, r0
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
 800143e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001444:	f7ff ff42 	bl	80012cc <__NVIC_GetPriorityGrouping>
 8001448:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	6978      	ldr	r0, [r7, #20]
 8001450:	f7ff ff90 	bl	8001374 <NVIC_EncodePriority>
 8001454:	4602      	mov	r2, r0
 8001456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff5f 	bl	8001320 <__NVIC_SetPriority>
}
 8001462:	bf00      	nop
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff35 	bl	80012e8 <__NVIC_EnableIRQ>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff ffa2 	bl	80013d8 <SysTick_Config>
 8001494:	4603      	mov	r3, r0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e043      	b.n	800153e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	4b22      	ldr	r3, [pc, #136]	; (8001548 <HAL_DMA_Init+0xa8>)
 80014be:	4413      	add	r3, r2
 80014c0:	4a22      	ldr	r2, [pc, #136]	; (800154c <HAL_DMA_Init+0xac>)
 80014c2:	fba2 2303 	umull	r2, r3, r2, r3
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	009a      	lsls	r2, r3, #2
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a1f      	ldr	r2, [pc, #124]	; (8001550 <HAL_DMA_Init+0xb0>)
 80014d2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2202      	movs	r2, #2
 80014d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80014ea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80014ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80014f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001504:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001510:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	4313      	orrs	r3, r2
 800151c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	bffdfff8 	.word	0xbffdfff8
 800154c:	cccccccd 	.word	0xcccccccd
 8001550:	40020000 	.word	0x40020000

08001554 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
 8001560:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001562:	2300      	movs	r3, #0
 8001564:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f893 3020 	ldrb.w	r3, [r3, #32]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d101      	bne.n	8001574 <HAL_DMA_Start_IT+0x20>
 8001570:	2302      	movs	r3, #2
 8001572:	e04a      	b.n	800160a <HAL_DMA_Start_IT+0xb6>
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001582:	2b01      	cmp	r3, #1
 8001584:	d13a      	bne.n	80015fc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2202      	movs	r2, #2
 800158a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2200      	movs	r2, #0
 8001592:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 0201 	bic.w	r2, r2, #1
 80015a2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	68b9      	ldr	r1, [r7, #8]
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f000 fa30 	bl	8001a10 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d008      	beq.n	80015ca <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f042 020e 	orr.w	r2, r2, #14
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	e00f      	b.n	80015ea <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 0204 	bic.w	r2, r2, #4
 80015d8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f042 020a 	orr.w	r2, r2, #10
 80015e8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f042 0201 	orr.w	r2, r2, #1
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	e005      	b.n	8001608 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001604:	2302      	movs	r3, #2
 8001606:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001608:	7dfb      	ldrb	r3, [r7, #23]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001612:	b480      	push	{r7}
 8001614:	b085      	sub	sp, #20
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001624:	2b02      	cmp	r3, #2
 8001626:	d008      	beq.n	800163a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2204      	movs	r2, #4
 800162c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e020      	b.n	800167c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 020e 	bic.w	r2, r2, #14
 8001648:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0201 	bic.w	r2, r2, #1
 8001658:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001662:	2101      	movs	r1, #1
 8001664:	fa01 f202 	lsl.w	r2, r1, r2
 8001668:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800167a:	7bfb      	ldrb	r3, [r7, #15]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr
	...

08001688 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800169a:	2b02      	cmp	r3, #2
 800169c:	d005      	beq.n	80016aa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2204      	movs	r2, #4
 80016a2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	73fb      	strb	r3, [r7, #15]
 80016a8:	e051      	b.n	800174e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 020e 	bic.w	r2, r2, #14
 80016b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 0201 	bic.w	r2, r2, #1
 80016c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a22      	ldr	r2, [pc, #136]	; (8001758 <HAL_DMA_Abort_IT+0xd0>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d029      	beq.n	8001728 <HAL_DMA_Abort_IT+0xa0>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a20      	ldr	r2, [pc, #128]	; (800175c <HAL_DMA_Abort_IT+0xd4>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d022      	beq.n	8001724 <HAL_DMA_Abort_IT+0x9c>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a1f      	ldr	r2, [pc, #124]	; (8001760 <HAL_DMA_Abort_IT+0xd8>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d01a      	beq.n	800171e <HAL_DMA_Abort_IT+0x96>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a1d      	ldr	r2, [pc, #116]	; (8001764 <HAL_DMA_Abort_IT+0xdc>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d012      	beq.n	8001718 <HAL_DMA_Abort_IT+0x90>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a1c      	ldr	r2, [pc, #112]	; (8001768 <HAL_DMA_Abort_IT+0xe0>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d00a      	beq.n	8001712 <HAL_DMA_Abort_IT+0x8a>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a1a      	ldr	r2, [pc, #104]	; (800176c <HAL_DMA_Abort_IT+0xe4>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d102      	bne.n	800170c <HAL_DMA_Abort_IT+0x84>
 8001706:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800170a:	e00e      	b.n	800172a <HAL_DMA_Abort_IT+0xa2>
 800170c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001710:	e00b      	b.n	800172a <HAL_DMA_Abort_IT+0xa2>
 8001712:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001716:	e008      	b.n	800172a <HAL_DMA_Abort_IT+0xa2>
 8001718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800171c:	e005      	b.n	800172a <HAL_DMA_Abort_IT+0xa2>
 800171e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001722:	e002      	b.n	800172a <HAL_DMA_Abort_IT+0xa2>
 8001724:	2310      	movs	r3, #16
 8001726:	e000      	b.n	800172a <HAL_DMA_Abort_IT+0xa2>
 8001728:	2301      	movs	r3, #1
 800172a:	4a11      	ldr	r2, [pc, #68]	; (8001770 <HAL_DMA_Abort_IT+0xe8>)
 800172c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	4798      	blx	r3
    } 
  }
  return status;
 800174e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40020008 	.word	0x40020008
 800175c:	4002001c 	.word	0x4002001c
 8001760:	40020030 	.word	0x40020030
 8001764:	40020044 	.word	0x40020044
 8001768:	40020058 	.word	0x40020058
 800176c:	4002006c 	.word	0x4002006c
 8001770:	40020000 	.word	0x40020000

08001774 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	2204      	movs	r2, #4
 8001792:	409a      	lsls	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4013      	ands	r3, r2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d04f      	beq.n	800183c <HAL_DMA_IRQHandler+0xc8>
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d04a      	beq.n	800183c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0320 	and.w	r3, r3, #32
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d107      	bne.n	80017c4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0204 	bic.w	r2, r2, #4
 80017c2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a66      	ldr	r2, [pc, #408]	; (8001964 <HAL_DMA_IRQHandler+0x1f0>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d029      	beq.n	8001822 <HAL_DMA_IRQHandler+0xae>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a65      	ldr	r2, [pc, #404]	; (8001968 <HAL_DMA_IRQHandler+0x1f4>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d022      	beq.n	800181e <HAL_DMA_IRQHandler+0xaa>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a63      	ldr	r2, [pc, #396]	; (800196c <HAL_DMA_IRQHandler+0x1f8>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d01a      	beq.n	8001818 <HAL_DMA_IRQHandler+0xa4>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a62      	ldr	r2, [pc, #392]	; (8001970 <HAL_DMA_IRQHandler+0x1fc>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d012      	beq.n	8001812 <HAL_DMA_IRQHandler+0x9e>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a60      	ldr	r2, [pc, #384]	; (8001974 <HAL_DMA_IRQHandler+0x200>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d00a      	beq.n	800180c <HAL_DMA_IRQHandler+0x98>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a5f      	ldr	r2, [pc, #380]	; (8001978 <HAL_DMA_IRQHandler+0x204>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d102      	bne.n	8001806 <HAL_DMA_IRQHandler+0x92>
 8001800:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001804:	e00e      	b.n	8001824 <HAL_DMA_IRQHandler+0xb0>
 8001806:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800180a:	e00b      	b.n	8001824 <HAL_DMA_IRQHandler+0xb0>
 800180c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001810:	e008      	b.n	8001824 <HAL_DMA_IRQHandler+0xb0>
 8001812:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001816:	e005      	b.n	8001824 <HAL_DMA_IRQHandler+0xb0>
 8001818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800181c:	e002      	b.n	8001824 <HAL_DMA_IRQHandler+0xb0>
 800181e:	2340      	movs	r3, #64	; 0x40
 8001820:	e000      	b.n	8001824 <HAL_DMA_IRQHandler+0xb0>
 8001822:	2304      	movs	r3, #4
 8001824:	4a55      	ldr	r2, [pc, #340]	; (800197c <HAL_DMA_IRQHandler+0x208>)
 8001826:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 8094 	beq.w	800195a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800183a:	e08e      	b.n	800195a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	2202      	movs	r2, #2
 8001842:	409a      	lsls	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4013      	ands	r3, r2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d056      	beq.n	80018fa <HAL_DMA_IRQHandler+0x186>
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d051      	beq.n	80018fa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0320 	and.w	r3, r3, #32
 8001860:	2b00      	cmp	r3, #0
 8001862:	d10b      	bne.n	800187c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f022 020a 	bic.w	r2, r2, #10
 8001872:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a38      	ldr	r2, [pc, #224]	; (8001964 <HAL_DMA_IRQHandler+0x1f0>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d029      	beq.n	80018da <HAL_DMA_IRQHandler+0x166>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a37      	ldr	r2, [pc, #220]	; (8001968 <HAL_DMA_IRQHandler+0x1f4>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d022      	beq.n	80018d6 <HAL_DMA_IRQHandler+0x162>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a35      	ldr	r2, [pc, #212]	; (800196c <HAL_DMA_IRQHandler+0x1f8>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d01a      	beq.n	80018d0 <HAL_DMA_IRQHandler+0x15c>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a34      	ldr	r2, [pc, #208]	; (8001970 <HAL_DMA_IRQHandler+0x1fc>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d012      	beq.n	80018ca <HAL_DMA_IRQHandler+0x156>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a32      	ldr	r2, [pc, #200]	; (8001974 <HAL_DMA_IRQHandler+0x200>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d00a      	beq.n	80018c4 <HAL_DMA_IRQHandler+0x150>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a31      	ldr	r2, [pc, #196]	; (8001978 <HAL_DMA_IRQHandler+0x204>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d102      	bne.n	80018be <HAL_DMA_IRQHandler+0x14a>
 80018b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018bc:	e00e      	b.n	80018dc <HAL_DMA_IRQHandler+0x168>
 80018be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018c2:	e00b      	b.n	80018dc <HAL_DMA_IRQHandler+0x168>
 80018c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018c8:	e008      	b.n	80018dc <HAL_DMA_IRQHandler+0x168>
 80018ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ce:	e005      	b.n	80018dc <HAL_DMA_IRQHandler+0x168>
 80018d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018d4:	e002      	b.n	80018dc <HAL_DMA_IRQHandler+0x168>
 80018d6:	2320      	movs	r3, #32
 80018d8:	e000      	b.n	80018dc <HAL_DMA_IRQHandler+0x168>
 80018da:	2302      	movs	r3, #2
 80018dc:	4a27      	ldr	r2, [pc, #156]	; (800197c <HAL_DMA_IRQHandler+0x208>)
 80018de:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d034      	beq.n	800195a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80018f8:	e02f      	b.n	800195a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	2208      	movs	r2, #8
 8001900:	409a      	lsls	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4013      	ands	r3, r2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d028      	beq.n	800195c <HAL_DMA_IRQHandler+0x1e8>
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	2b00      	cmp	r3, #0
 8001912:	d023      	beq.n	800195c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 020e 	bic.w	r2, r2, #14
 8001922:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800192c:	2101      	movs	r1, #1
 800192e:	fa01 f202 	lsl.w	r2, r1, r2
 8001932:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	2b00      	cmp	r3, #0
 8001950:	d004      	beq.n	800195c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	4798      	blx	r3
    }
  }
  return;
 800195a:	bf00      	nop
 800195c:	bf00      	nop
}
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40020008 	.word	0x40020008
 8001968:	4002001c 	.word	0x4002001c
 800196c:	40020030 	.word	0x40020030
 8001970:	40020044 	.word	0x40020044
 8001974:	40020058 	.word	0x40020058
 8001978:	4002006c 	.word	0x4002006c
 800197c:	40020000 	.word	0x40020000

08001980 <HAL_DMA_RegisterCallback>:
  * @param pCallback: pointer to private callbacsk function which has pointer to 
  *                   a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                          
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8001980:	b480      	push	{r7}
 8001982:	b087      	sub	sp, #28
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	460b      	mov	r3, r1
 800198a:	607a      	str	r2, [r7, #4]
 800198c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	75fb      	strb	r3, [r7, #23]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d101      	bne.n	80019a0 <HAL_DMA_RegisterCallback+0x20>
 800199c:	2302      	movs	r3, #2
 800199e:	e032      	b.n	8001a06 <HAL_DMA_RegisterCallback+0x86>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d122      	bne.n	80019f8 <HAL_DMA_RegisterCallback+0x78>
  {
    switch (CallbackID)
 80019b2:	7afb      	ldrb	r3, [r7, #11]
 80019b4:	2b03      	cmp	r3, #3
 80019b6:	d81b      	bhi.n	80019f0 <HAL_DMA_RegisterCallback+0x70>
 80019b8:	a201      	add	r2, pc, #4	; (adr r2, 80019c0 <HAL_DMA_RegisterCallback+0x40>)
 80019ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019be:	bf00      	nop
 80019c0:	080019d1 	.word	0x080019d1
 80019c4:	080019d9 	.word	0x080019d9
 80019c8:	080019e1 	.word	0x080019e1
 80019cc:	080019e9 	.word	0x080019e9
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80019d6:	e011      	b.n	80019fc <HAL_DMA_RegisterCallback+0x7c>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	62da      	str	r2, [r3, #44]	; 0x2c
      break;         
 80019de:	e00d      	b.n	80019fc <HAL_DMA_RegisterCallback+0x7c>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	631a      	str	r2, [r3, #48]	; 0x30
      break;         
 80019e6:	e009      	b.n	80019fc <HAL_DMA_RegisterCallback+0x7c>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	635a      	str	r2, [r3, #52]	; 0x34
      break; 
 80019ee:	e005      	b.n	80019fc <HAL_DMA_RegisterCallback+0x7c>
      
    default:
      status = HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	75fb      	strb	r3, [r7, #23]
      break;                                                            
 80019f4:	bf00      	nop
 80019f6:	e001      	b.n	80019fc <HAL_DMA_RegisterCallback+0x7c>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	75fb      	strb	r3, [r7, #23]
  } 
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status;
 8001a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	371c      	adds	r7, #28
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
 8001a1c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a26:	2101      	movs	r1, #1
 8001a28:	fa01 f202 	lsl.w	r2, r1, r2
 8001a2c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b10      	cmp	r3, #16
 8001a3c:	d108      	bne.n	8001a50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a4e:	e007      	b.n	8001a60 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68ba      	ldr	r2, [r7, #8]
 8001a56:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	60da      	str	r2, [r3, #12]
}
 8001a60:	bf00      	nop
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr
	...

08001a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b08b      	sub	sp, #44	; 0x2c
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a76:	2300      	movs	r3, #0
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a7e:	e127      	b.n	8001cd0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a80:	2201      	movs	r2, #1
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	69fa      	ldr	r2, [r7, #28]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	f040 8116 	bne.w	8001cca <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b12      	cmp	r3, #18
 8001aa4:	d034      	beq.n	8001b10 <HAL_GPIO_Init+0xa4>
 8001aa6:	2b12      	cmp	r3, #18
 8001aa8:	d80d      	bhi.n	8001ac6 <HAL_GPIO_Init+0x5a>
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d02b      	beq.n	8001b06 <HAL_GPIO_Init+0x9a>
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d804      	bhi.n	8001abc <HAL_GPIO_Init+0x50>
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d031      	beq.n	8001b1a <HAL_GPIO_Init+0xae>
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d01c      	beq.n	8001af4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001aba:	e048      	b.n	8001b4e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	d043      	beq.n	8001b48 <HAL_GPIO_Init+0xdc>
 8001ac0:	2b11      	cmp	r3, #17
 8001ac2:	d01b      	beq.n	8001afc <HAL_GPIO_Init+0x90>
          break;
 8001ac4:	e043      	b.n	8001b4e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ac6:	4a89      	ldr	r2, [pc, #548]	; (8001cec <HAL_GPIO_Init+0x280>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d026      	beq.n	8001b1a <HAL_GPIO_Init+0xae>
 8001acc:	4a87      	ldr	r2, [pc, #540]	; (8001cec <HAL_GPIO_Init+0x280>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d806      	bhi.n	8001ae0 <HAL_GPIO_Init+0x74>
 8001ad2:	4a87      	ldr	r2, [pc, #540]	; (8001cf0 <HAL_GPIO_Init+0x284>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d020      	beq.n	8001b1a <HAL_GPIO_Init+0xae>
 8001ad8:	4a86      	ldr	r2, [pc, #536]	; (8001cf4 <HAL_GPIO_Init+0x288>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d01d      	beq.n	8001b1a <HAL_GPIO_Init+0xae>
          break;
 8001ade:	e036      	b.n	8001b4e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ae0:	4a85      	ldr	r2, [pc, #532]	; (8001cf8 <HAL_GPIO_Init+0x28c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d019      	beq.n	8001b1a <HAL_GPIO_Init+0xae>
 8001ae6:	4a85      	ldr	r2, [pc, #532]	; (8001cfc <HAL_GPIO_Init+0x290>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d016      	beq.n	8001b1a <HAL_GPIO_Init+0xae>
 8001aec:	4a84      	ldr	r2, [pc, #528]	; (8001d00 <HAL_GPIO_Init+0x294>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d013      	beq.n	8001b1a <HAL_GPIO_Init+0xae>
          break;
 8001af2:	e02c      	b.n	8001b4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	623b      	str	r3, [r7, #32]
          break;
 8001afa:	e028      	b.n	8001b4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	3304      	adds	r3, #4
 8001b02:	623b      	str	r3, [r7, #32]
          break;
 8001b04:	e023      	b.n	8001b4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	3308      	adds	r3, #8
 8001b0c:	623b      	str	r3, [r7, #32]
          break;
 8001b0e:	e01e      	b.n	8001b4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	330c      	adds	r3, #12
 8001b16:	623b      	str	r3, [r7, #32]
          break;
 8001b18:	e019      	b.n	8001b4e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d102      	bne.n	8001b28 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b22:	2304      	movs	r3, #4
 8001b24:	623b      	str	r3, [r7, #32]
          break;
 8001b26:	e012      	b.n	8001b4e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d105      	bne.n	8001b3c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b30:	2308      	movs	r3, #8
 8001b32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	69fa      	ldr	r2, [r7, #28]
 8001b38:	611a      	str	r2, [r3, #16]
          break;
 8001b3a:	e008      	b.n	8001b4e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b3c:	2308      	movs	r3, #8
 8001b3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	69fa      	ldr	r2, [r7, #28]
 8001b44:	615a      	str	r2, [r3, #20]
          break;
 8001b46:	e002      	b.n	8001b4e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	623b      	str	r3, [r7, #32]
          break;
 8001b4c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	2bff      	cmp	r3, #255	; 0xff
 8001b52:	d801      	bhi.n	8001b58 <HAL_GPIO_Init+0xec>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	e001      	b.n	8001b5c <HAL_GPIO_Init+0xf0>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3304      	adds	r3, #4
 8001b5c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	2bff      	cmp	r3, #255	; 0xff
 8001b62:	d802      	bhi.n	8001b6a <HAL_GPIO_Init+0xfe>
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	e002      	b.n	8001b70 <HAL_GPIO_Init+0x104>
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	3b08      	subs	r3, #8
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	210f      	movs	r1, #15
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	401a      	ands	r2, r3
 8001b82:	6a39      	ldr	r1, [r7, #32]
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 8096 	beq.w	8001cca <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b9e:	4b59      	ldr	r3, [pc, #356]	; (8001d04 <HAL_GPIO_Init+0x298>)
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	4a58      	ldr	r2, [pc, #352]	; (8001d04 <HAL_GPIO_Init+0x298>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6193      	str	r3, [r2, #24]
 8001baa:	4b56      	ldr	r3, [pc, #344]	; (8001d04 <HAL_GPIO_Init+0x298>)
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bb6:	4a54      	ldr	r2, [pc, #336]	; (8001d08 <HAL_GPIO_Init+0x29c>)
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	089b      	lsrs	r3, r3, #2
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	220f      	movs	r2, #15
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a4b      	ldr	r2, [pc, #300]	; (8001d0c <HAL_GPIO_Init+0x2a0>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d013      	beq.n	8001c0a <HAL_GPIO_Init+0x19e>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a4a      	ldr	r2, [pc, #296]	; (8001d10 <HAL_GPIO_Init+0x2a4>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d00d      	beq.n	8001c06 <HAL_GPIO_Init+0x19a>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a49      	ldr	r2, [pc, #292]	; (8001d14 <HAL_GPIO_Init+0x2a8>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d007      	beq.n	8001c02 <HAL_GPIO_Init+0x196>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a48      	ldr	r2, [pc, #288]	; (8001d18 <HAL_GPIO_Init+0x2ac>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d101      	bne.n	8001bfe <HAL_GPIO_Init+0x192>
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e006      	b.n	8001c0c <HAL_GPIO_Init+0x1a0>
 8001bfe:	2304      	movs	r3, #4
 8001c00:	e004      	b.n	8001c0c <HAL_GPIO_Init+0x1a0>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e002      	b.n	8001c0c <HAL_GPIO_Init+0x1a0>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <HAL_GPIO_Init+0x1a0>
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c0e:	f002 0203 	and.w	r2, r2, #3
 8001c12:	0092      	lsls	r2, r2, #2
 8001c14:	4093      	lsls	r3, r2
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c1c:	493a      	ldr	r1, [pc, #232]	; (8001d08 <HAL_GPIO_Init+0x29c>)
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	089b      	lsrs	r3, r3, #2
 8001c22:	3302      	adds	r3, #2
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d006      	beq.n	8001c44 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c36:	4b39      	ldr	r3, [pc, #228]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	4938      	ldr	r1, [pc, #224]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	600b      	str	r3, [r1, #0]
 8001c42:	e006      	b.n	8001c52 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c44:	4b35      	ldr	r3, [pc, #212]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	4933      	ldr	r1, [pc, #204]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d006      	beq.n	8001c6c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c5e:	4b2f      	ldr	r3, [pc, #188]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	492e      	ldr	r1, [pc, #184]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	604b      	str	r3, [r1, #4]
 8001c6a:	e006      	b.n	8001c7a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c6c:	4b2b      	ldr	r3, [pc, #172]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	4929      	ldr	r1, [pc, #164]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001c76:	4013      	ands	r3, r2
 8001c78:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d006      	beq.n	8001c94 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c86:	4b25      	ldr	r3, [pc, #148]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	4924      	ldr	r1, [pc, #144]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	608b      	str	r3, [r1, #8]
 8001c92:	e006      	b.n	8001ca2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c94:	4b21      	ldr	r3, [pc, #132]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	491f      	ldr	r1, [pc, #124]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d006      	beq.n	8001cbc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cae:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	491a      	ldr	r1, [pc, #104]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	60cb      	str	r3, [r1, #12]
 8001cba:	e006      	b.n	8001cca <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cbc:	4b17      	ldr	r3, [pc, #92]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	4915      	ldr	r1, [pc, #84]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	3301      	adds	r3, #1
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f47f aed0 	bne.w	8001a80 <HAL_GPIO_Init+0x14>
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	372c      	adds	r7, #44	; 0x2c
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	10210000 	.word	0x10210000
 8001cf0:	10110000 	.word	0x10110000
 8001cf4:	10120000 	.word	0x10120000
 8001cf8:	10310000 	.word	0x10310000
 8001cfc:	10320000 	.word	0x10320000
 8001d00:	10220000 	.word	0x10220000
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40010000 	.word	0x40010000
 8001d0c:	40010800 	.word	0x40010800
 8001d10:	40010c00 	.word	0x40010c00
 8001d14:	40011000 	.word	0x40011000
 8001d18:	40011400 	.word	0x40011400
 8001d1c:	40010400 	.word	0x40010400

08001d20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	887b      	ldrh	r3, [r7, #2]
 8001d32:	4013      	ands	r3, r2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d002      	beq.n	8001d3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	73fb      	strb	r3, [r7, #15]
 8001d3c:	e001      	b.n	8001d42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr
	...

08001d50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e26c      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 8087 	beq.w	8001e7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d70:	4b92      	ldr	r3, [pc, #584]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 030c 	and.w	r3, r3, #12
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d00c      	beq.n	8001d96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d7c:	4b8f      	ldr	r3, [pc, #572]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 030c 	and.w	r3, r3, #12
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d112      	bne.n	8001dae <HAL_RCC_OscConfig+0x5e>
 8001d88:	4b8c      	ldr	r3, [pc, #560]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d94:	d10b      	bne.n	8001dae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d96:	4b89      	ldr	r3, [pc, #548]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d06c      	beq.n	8001e7c <HAL_RCC_OscConfig+0x12c>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d168      	bne.n	8001e7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e246      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db6:	d106      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x76>
 8001db8:	4b80      	ldr	r3, [pc, #512]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a7f      	ldr	r2, [pc, #508]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc2:	6013      	str	r3, [r2, #0]
 8001dc4:	e02e      	b.n	8001e24 <HAL_RCC_OscConfig+0xd4>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10c      	bne.n	8001de8 <HAL_RCC_OscConfig+0x98>
 8001dce:	4b7b      	ldr	r3, [pc, #492]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a7a      	ldr	r2, [pc, #488]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	4b78      	ldr	r3, [pc, #480]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a77      	ldr	r2, [pc, #476]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001de0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	e01d      	b.n	8001e24 <HAL_RCC_OscConfig+0xd4>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001df0:	d10c      	bne.n	8001e0c <HAL_RCC_OscConfig+0xbc>
 8001df2:	4b72      	ldr	r3, [pc, #456]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a71      	ldr	r2, [pc, #452]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	4b6f      	ldr	r3, [pc, #444]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a6e      	ldr	r2, [pc, #440]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	e00b      	b.n	8001e24 <HAL_RCC_OscConfig+0xd4>
 8001e0c:	4b6b      	ldr	r3, [pc, #428]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a6a      	ldr	r2, [pc, #424]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	4b68      	ldr	r3, [pc, #416]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a67      	ldr	r2, [pc, #412]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d013      	beq.n	8001e54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2c:	f7ff f9fe 	bl	800122c <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e34:	f7ff f9fa 	bl	800122c <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b64      	cmp	r3, #100	; 0x64
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e1fa      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e46:	4b5d      	ldr	r3, [pc, #372]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0xe4>
 8001e52:	e014      	b.n	8001e7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e54:	f7ff f9ea 	bl	800122c <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e5c:	f7ff f9e6 	bl	800122c <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b64      	cmp	r3, #100	; 0x64
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e1e6      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e6e:	4b53      	ldr	r3, [pc, #332]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f0      	bne.n	8001e5c <HAL_RCC_OscConfig+0x10c>
 8001e7a:	e000      	b.n	8001e7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d063      	beq.n	8001f52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e8a:	4b4c      	ldr	r3, [pc, #304]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00b      	beq.n	8001eae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e96:	4b49      	ldr	r3, [pc, #292]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 030c 	and.w	r3, r3, #12
 8001e9e:	2b08      	cmp	r3, #8
 8001ea0:	d11c      	bne.n	8001edc <HAL_RCC_OscConfig+0x18c>
 8001ea2:	4b46      	ldr	r3, [pc, #280]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d116      	bne.n	8001edc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eae:	4b43      	ldr	r3, [pc, #268]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d005      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x176>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d001      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e1ba      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec6:	4b3d      	ldr	r3, [pc, #244]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	4939      	ldr	r1, [pc, #228]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eda:	e03a      	b.n	8001f52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d020      	beq.n	8001f26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ee4:	4b36      	ldr	r3, [pc, #216]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eea:	f7ff f99f 	bl	800122c <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef2:	f7ff f99b 	bl	800122c <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e19b      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f04:	4b2d      	ldr	r3, [pc, #180]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f10:	4b2a      	ldr	r3, [pc, #168]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	4927      	ldr	r1, [pc, #156]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	600b      	str	r3, [r1, #0]
 8001f24:	e015      	b.n	8001f52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f26:	4b26      	ldr	r3, [pc, #152]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7ff f97e 	bl	800122c <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f34:	f7ff f97a 	bl	800122c <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e17a      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f46:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d03a      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d019      	beq.n	8001f9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f66:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6c:	f7ff f95e 	bl	800122c <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f74:	f7ff f95a 	bl	800122c <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e15a      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f86:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0f0      	beq.n	8001f74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f92:	2001      	movs	r0, #1
 8001f94:	f000 fada 	bl	800254c <RCC_Delay>
 8001f98:	e01c      	b.n	8001fd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f9a:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa0:	f7ff f944 	bl	800122c <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fa6:	e00f      	b.n	8001fc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa8:	f7ff f940 	bl	800122c <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d908      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e140      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	42420000 	.word	0x42420000
 8001fc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc8:	4b9e      	ldr	r3, [pc, #632]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1e9      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 80a6 	beq.w	800212e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fe6:	4b97      	ldr	r3, [pc, #604]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10d      	bne.n	800200e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ff2:	4b94      	ldr	r3, [pc, #592]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	4a93      	ldr	r2, [pc, #588]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8001ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	61d3      	str	r3, [r2, #28]
 8001ffe:	4b91      	ldr	r3, [pc, #580]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800200a:	2301      	movs	r3, #1
 800200c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200e:	4b8e      	ldr	r3, [pc, #568]	; (8002248 <HAL_RCC_OscConfig+0x4f8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002016:	2b00      	cmp	r3, #0
 8002018:	d118      	bne.n	800204c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800201a:	4b8b      	ldr	r3, [pc, #556]	; (8002248 <HAL_RCC_OscConfig+0x4f8>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a8a      	ldr	r2, [pc, #552]	; (8002248 <HAL_RCC_OscConfig+0x4f8>)
 8002020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002026:	f7ff f901 	bl	800122c <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800202e:	f7ff f8fd 	bl	800122c <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b64      	cmp	r3, #100	; 0x64
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e0fd      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002040:	4b81      	ldr	r3, [pc, #516]	; (8002248 <HAL_RCC_OscConfig+0x4f8>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0f0      	beq.n	800202e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d106      	bne.n	8002062 <HAL_RCC_OscConfig+0x312>
 8002054:	4b7b      	ldr	r3, [pc, #492]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	4a7a      	ldr	r2, [pc, #488]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	6213      	str	r3, [r2, #32]
 8002060:	e02d      	b.n	80020be <HAL_RCC_OscConfig+0x36e>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10c      	bne.n	8002084 <HAL_RCC_OscConfig+0x334>
 800206a:	4b76      	ldr	r3, [pc, #472]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	4a75      	ldr	r2, [pc, #468]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002070:	f023 0301 	bic.w	r3, r3, #1
 8002074:	6213      	str	r3, [r2, #32]
 8002076:	4b73      	ldr	r3, [pc, #460]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	4a72      	ldr	r2, [pc, #456]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 800207c:	f023 0304 	bic.w	r3, r3, #4
 8002080:	6213      	str	r3, [r2, #32]
 8002082:	e01c      	b.n	80020be <HAL_RCC_OscConfig+0x36e>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	2b05      	cmp	r3, #5
 800208a:	d10c      	bne.n	80020a6 <HAL_RCC_OscConfig+0x356>
 800208c:	4b6d      	ldr	r3, [pc, #436]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	4a6c      	ldr	r2, [pc, #432]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002092:	f043 0304 	orr.w	r3, r3, #4
 8002096:	6213      	str	r3, [r2, #32]
 8002098:	4b6a      	ldr	r3, [pc, #424]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	4a69      	ldr	r2, [pc, #420]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	6213      	str	r3, [r2, #32]
 80020a4:	e00b      	b.n	80020be <HAL_RCC_OscConfig+0x36e>
 80020a6:	4b67      	ldr	r3, [pc, #412]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	4a66      	ldr	r2, [pc, #408]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 80020ac:	f023 0301 	bic.w	r3, r3, #1
 80020b0:	6213      	str	r3, [r2, #32]
 80020b2:	4b64      	ldr	r3, [pc, #400]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	4a63      	ldr	r2, [pc, #396]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 80020b8:	f023 0304 	bic.w	r3, r3, #4
 80020bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d015      	beq.n	80020f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c6:	f7ff f8b1 	bl	800122c <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020cc:	e00a      	b.n	80020e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ce:	f7ff f8ad 	bl	800122c <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020dc:	4293      	cmp	r3, r2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e0ab      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e4:	4b57      	ldr	r3, [pc, #348]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0ee      	beq.n	80020ce <HAL_RCC_OscConfig+0x37e>
 80020f0:	e014      	b.n	800211c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f2:	f7ff f89b 	bl	800122c <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f8:	e00a      	b.n	8002110 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fa:	f7ff f897 	bl	800122c <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	f241 3288 	movw	r2, #5000	; 0x1388
 8002108:	4293      	cmp	r3, r2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e095      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002110:	4b4c      	ldr	r3, [pc, #304]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1ee      	bne.n	80020fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800211c:	7dfb      	ldrb	r3, [r7, #23]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d105      	bne.n	800212e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002122:	4b48      	ldr	r3, [pc, #288]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	4a47      	ldr	r2, [pc, #284]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800212c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 8081 	beq.w	800223a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002138:	4b42      	ldr	r3, [pc, #264]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 030c 	and.w	r3, r3, #12
 8002140:	2b08      	cmp	r3, #8
 8002142:	d061      	beq.n	8002208 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	2b02      	cmp	r3, #2
 800214a:	d146      	bne.n	80021da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214c:	4b3f      	ldr	r3, [pc, #252]	; (800224c <HAL_RCC_OscConfig+0x4fc>)
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002152:	f7ff f86b 	bl	800122c <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215a:	f7ff f867 	bl	800122c <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e067      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800216c:	4b35      	ldr	r3, [pc, #212]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1f0      	bne.n	800215a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002180:	d108      	bne.n	8002194 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002182:	4b30      	ldr	r3, [pc, #192]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	492d      	ldr	r1, [pc, #180]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002190:	4313      	orrs	r3, r2
 8002192:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002194:	4b2b      	ldr	r3, [pc, #172]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a19      	ldr	r1, [r3, #32]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	430b      	orrs	r3, r1
 80021a6:	4927      	ldr	r1, [pc, #156]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021ac:	4b27      	ldr	r3, [pc, #156]	; (800224c <HAL_RCC_OscConfig+0x4fc>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b2:	f7ff f83b 	bl	800122c <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ba:	f7ff f837 	bl	800122c <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e037      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021cc:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0x46a>
 80021d8:	e02f      	b.n	800223a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021da:	4b1c      	ldr	r3, [pc, #112]	; (800224c <HAL_RCC_OscConfig+0x4fc>)
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e0:	f7ff f824 	bl	800122c <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e8:	f7ff f820 	bl	800122c <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e020      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021fa:	4b12      	ldr	r3, [pc, #72]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x498>
 8002206:	e018      	b.n	800223a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e013      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	429a      	cmp	r2, r3
 8002226:	d106      	bne.n	8002236 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002232:	429a      	cmp	r2, r3
 8002234:	d001      	beq.n	800223a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40021000 	.word	0x40021000
 8002248:	40007000 	.word	0x40007000
 800224c:	42420060 	.word	0x42420060

08002250 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e0d0      	b.n	8002406 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002264:	4b6a      	ldr	r3, [pc, #424]	; (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d910      	bls.n	8002294 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002272:	4b67      	ldr	r3, [pc, #412]	; (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 0207 	bic.w	r2, r3, #7
 800227a:	4965      	ldr	r1, [pc, #404]	; (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	4313      	orrs	r3, r2
 8002280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002282:	4b63      	ldr	r3, [pc, #396]	; (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d001      	beq.n	8002294 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0b8      	b.n	8002406 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d020      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d005      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022ac:	4b59      	ldr	r3, [pc, #356]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	4a58      	ldr	r2, [pc, #352]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80022b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d005      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022c4:	4b53      	ldr	r3, [pc, #332]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	4a52      	ldr	r2, [pc, #328]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80022ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d0:	4b50      	ldr	r3, [pc, #320]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	494d      	ldr	r1, [pc, #308]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d040      	beq.n	8002370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d107      	bne.n	8002306 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f6:	4b47      	ldr	r3, [pc, #284]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d115      	bne.n	800232e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e07f      	b.n	8002406 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d107      	bne.n	800231e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800230e:	4b41      	ldr	r3, [pc, #260]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d109      	bne.n	800232e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e073      	b.n	8002406 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231e:	4b3d      	ldr	r3, [pc, #244]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e06b      	b.n	8002406 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800232e:	4b39      	ldr	r3, [pc, #228]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f023 0203 	bic.w	r2, r3, #3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	4936      	ldr	r1, [pc, #216]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 800233c:	4313      	orrs	r3, r2
 800233e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002340:	f7fe ff74 	bl	800122c <HAL_GetTick>
 8002344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002346:	e00a      	b.n	800235e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002348:	f7fe ff70 	bl	800122c <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	f241 3288 	movw	r2, #5000	; 0x1388
 8002356:	4293      	cmp	r3, r2
 8002358:	d901      	bls.n	800235e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e053      	b.n	8002406 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235e:	4b2d      	ldr	r3, [pc, #180]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 020c 	and.w	r2, r3, #12
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	429a      	cmp	r2, r3
 800236e:	d1eb      	bne.n	8002348 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002370:	4b27      	ldr	r3, [pc, #156]	; (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d210      	bcs.n	80023a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237e:	4b24      	ldr	r3, [pc, #144]	; (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 0207 	bic.w	r2, r3, #7
 8002386:	4922      	ldr	r1, [pc, #136]	; (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238e:	4b20      	ldr	r3, [pc, #128]	; (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e032      	b.n	8002406 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ac:	4b19      	ldr	r3, [pc, #100]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4916      	ldr	r1, [pc, #88]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d009      	beq.n	80023de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023ca:	4b12      	ldr	r3, [pc, #72]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	490e      	ldr	r1, [pc, #56]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023de:	f000 f821 	bl	8002424 <HAL_RCC_GetSysClockFreq>
 80023e2:	4601      	mov	r1, r0
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	091b      	lsrs	r3, r3, #4
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	4a0a      	ldr	r2, [pc, #40]	; (8002418 <HAL_RCC_ClockConfig+0x1c8>)
 80023f0:	5cd3      	ldrb	r3, [r2, r3]
 80023f2:	fa21 f303 	lsr.w	r3, r1, r3
 80023f6:	4a09      	ldr	r2, [pc, #36]	; (800241c <HAL_RCC_ClockConfig+0x1cc>)
 80023f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <HAL_RCC_ClockConfig+0x1d0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe fed2 	bl	80011a8 <HAL_InitTick>

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40022000 	.word	0x40022000
 8002414:	40021000 	.word	0x40021000
 8002418:	08004130 	.word	0x08004130
 800241c:	20000004 	.word	0x20000004
 8002420:	20000008 	.word	0x20000008

08002424 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002424:	b490      	push	{r4, r7}
 8002426:	b08a      	sub	sp, #40	; 0x28
 8002428:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800242a:	4b2a      	ldr	r3, [pc, #168]	; (80024d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800242c:	1d3c      	adds	r4, r7, #4
 800242e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002430:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002434:	4b28      	ldr	r3, [pc, #160]	; (80024d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
 800243e:	2300      	movs	r3, #0
 8002440:	61bb      	str	r3, [r7, #24]
 8002442:	2300      	movs	r3, #0
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800244a:	2300      	movs	r3, #0
 800244c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800244e:	4b23      	ldr	r3, [pc, #140]	; (80024dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f003 030c 	and.w	r3, r3, #12
 800245a:	2b04      	cmp	r3, #4
 800245c:	d002      	beq.n	8002464 <HAL_RCC_GetSysClockFreq+0x40>
 800245e:	2b08      	cmp	r3, #8
 8002460:	d003      	beq.n	800246a <HAL_RCC_GetSysClockFreq+0x46>
 8002462:	e02d      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002464:	4b1e      	ldr	r3, [pc, #120]	; (80024e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002466:	623b      	str	r3, [r7, #32]
      break;
 8002468:	e02d      	b.n	80024c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	0c9b      	lsrs	r3, r3, #18
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002476:	4413      	add	r3, r2
 8002478:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800247c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d013      	beq.n	80024b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002488:	4b14      	ldr	r3, [pc, #80]	; (80024dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	0c5b      	lsrs	r3, r3, #17
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002496:	4413      	add	r3, r2
 8002498:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800249c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	4a0f      	ldr	r2, [pc, #60]	; (80024e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024a2:	fb02 f203 	mul.w	r2, r2, r3
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
 80024ae:	e004      	b.n	80024ba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	4a0c      	ldr	r2, [pc, #48]	; (80024e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024b4:	fb02 f303 	mul.w	r3, r2, r3
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	623b      	str	r3, [r7, #32]
      break;
 80024be:	e002      	b.n	80024c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024c0:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024c2:	623b      	str	r3, [r7, #32]
      break;
 80024c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024c6:	6a3b      	ldr	r3, [r7, #32]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3728      	adds	r7, #40	; 0x28
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc90      	pop	{r4, r7}
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	0800411c 	.word	0x0800411c
 80024d8:	0800412c 	.word	0x0800412c
 80024dc:	40021000 	.word	0x40021000
 80024e0:	007a1200 	.word	0x007a1200
 80024e4:	003d0900 	.word	0x003d0900

080024e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024ec:	4b02      	ldr	r3, [pc, #8]	; (80024f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80024ee:	681b      	ldr	r3, [r3, #0]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr
 80024f8:	20000004 	.word	0x20000004

080024fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002500:	f7ff fff2 	bl	80024e8 <HAL_RCC_GetHCLKFreq>
 8002504:	4601      	mov	r1, r0
 8002506:	4b05      	ldr	r3, [pc, #20]	; (800251c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	0a1b      	lsrs	r3, r3, #8
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	4a03      	ldr	r2, [pc, #12]	; (8002520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002512:	5cd3      	ldrb	r3, [r2, r3]
 8002514:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002518:	4618      	mov	r0, r3
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40021000 	.word	0x40021000
 8002520:	08004140 	.word	0x08004140

08002524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002528:	f7ff ffde 	bl	80024e8 <HAL_RCC_GetHCLKFreq>
 800252c:	4601      	mov	r1, r0
 800252e:	4b05      	ldr	r3, [pc, #20]	; (8002544 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	0adb      	lsrs	r3, r3, #11
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	4a03      	ldr	r2, [pc, #12]	; (8002548 <HAL_RCC_GetPCLK2Freq+0x24>)
 800253a:	5cd3      	ldrb	r3, [r2, r3]
 800253c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002540:	4618      	mov	r0, r3
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40021000 	.word	0x40021000
 8002548:	08004140 	.word	0x08004140

0800254c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002554:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <RCC_Delay+0x34>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <RCC_Delay+0x38>)
 800255a:	fba2 2303 	umull	r2, r3, r2, r3
 800255e:	0a5b      	lsrs	r3, r3, #9
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	fb02 f303 	mul.w	r3, r2, r3
 8002566:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002568:	bf00      	nop
  }
  while (Delay --);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1e5a      	subs	r2, r3, #1
 800256e:	60fa      	str	r2, [r7, #12]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1f9      	bne.n	8002568 <RCC_Delay+0x1c>
}
 8002574:	bf00      	nop
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000004 	.word	0x20000004
 8002584:	10624dd3 	.word	0x10624dd3

08002588 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e041      	b.n	800261e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d106      	bne.n	80025b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7fe fc24 	bl	8000dfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2202      	movs	r2, #2
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3304      	adds	r3, #4
 80025c4:	4619      	mov	r1, r3
 80025c6:	4610      	mov	r0, r2
 80025c8:	f000 fbe8 	bl	8002d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b082      	sub	sp, #8
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e041      	b.n	80026bc <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d106      	bne.n	8002652 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f839 	bl	80026c4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2202      	movs	r2, #2
 8002656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	3304      	adds	r3, #4
 8002662:	4619      	mov	r1, r3
 8002664:	4610      	mov	r0, r2
 8002666:	f000 fb99 	bl	8002d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr
	...

080026d8 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d109      	bne.n	80026fc <HAL_TIM_OC_Start+0x24>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	bf14      	ite	ne
 80026f4:	2301      	movne	r3, #1
 80026f6:	2300      	moveq	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	e022      	b.n	8002742 <HAL_TIM_OC_Start+0x6a>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d109      	bne.n	8002716 <HAL_TIM_OC_Start+0x3e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b01      	cmp	r3, #1
 800270c:	bf14      	ite	ne
 800270e:	2301      	movne	r3, #1
 8002710:	2300      	moveq	r3, #0
 8002712:	b2db      	uxtb	r3, r3
 8002714:	e015      	b.n	8002742 <HAL_TIM_OC_Start+0x6a>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b08      	cmp	r3, #8
 800271a:	d109      	bne.n	8002730 <HAL_TIM_OC_Start+0x58>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b01      	cmp	r3, #1
 8002726:	bf14      	ite	ne
 8002728:	2301      	movne	r3, #1
 800272a:	2300      	moveq	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	e008      	b.n	8002742 <HAL_TIM_OC_Start+0x6a>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b01      	cmp	r3, #1
 800273a:	bf14      	ite	ne
 800273c:	2301      	movne	r3, #1
 800273e:	2300      	moveq	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e05e      	b.n	8002808 <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d104      	bne.n	800275a <HAL_TIM_OC_Start+0x82>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002758:	e013      	b.n	8002782 <HAL_TIM_OC_Start+0xaa>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	2b04      	cmp	r3, #4
 800275e:	d104      	bne.n	800276a <HAL_TIM_OC_Start+0x92>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2202      	movs	r2, #2
 8002764:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002768:	e00b      	b.n	8002782 <HAL_TIM_OC_Start+0xaa>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2b08      	cmp	r3, #8
 800276e:	d104      	bne.n	800277a <HAL_TIM_OC_Start+0xa2>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2202      	movs	r2, #2
 8002774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002778:	e003      	b.n	8002782 <HAL_TIM_OC_Start+0xaa>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2202      	movs	r2, #2
 800277e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2201      	movs	r2, #1
 8002788:	6839      	ldr	r1, [r7, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f000 fd86 	bl	800329c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a1e      	ldr	r2, [pc, #120]	; (8002810 <HAL_TIM_OC_Start+0x138>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d107      	bne.n	80027aa <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a18      	ldr	r2, [pc, #96]	; (8002810 <HAL_TIM_OC_Start+0x138>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d00e      	beq.n	80027d2 <HAL_TIM_OC_Start+0xfa>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027bc:	d009      	beq.n	80027d2 <HAL_TIM_OC_Start+0xfa>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a14      	ldr	r2, [pc, #80]	; (8002814 <HAL_TIM_OC_Start+0x13c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d004      	beq.n	80027d2 <HAL_TIM_OC_Start+0xfa>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a12      	ldr	r2, [pc, #72]	; (8002818 <HAL_TIM_OC_Start+0x140>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d111      	bne.n	80027f6 <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2b06      	cmp	r3, #6
 80027e2:	d010      	beq.n	8002806 <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0201 	orr.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027f4:	e007      	b.n	8002806 <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f042 0201 	orr.w	r2, r2, #1
 8002804:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40012c00 	.word	0x40012c00
 8002814:	40000400 	.word	0x40000400
 8002818:	40000800 	.word	0x40000800

0800281c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e041      	b.n	80028b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d106      	bne.n	8002848 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7fe fabe 	bl	8000dc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3304      	adds	r3, #4
 8002858:	4619      	mov	r1, r3
 800285a:	4610      	mov	r0, r2
 800285c:	f000 fa9e 	bl	8002d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
	...

080028bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d109      	bne.n	80028e0 <HAL_TIM_PWM_Start+0x24>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	bf14      	ite	ne
 80028d8:	2301      	movne	r3, #1
 80028da:	2300      	moveq	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	e022      	b.n	8002926 <HAL_TIM_PWM_Start+0x6a>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d109      	bne.n	80028fa <HAL_TIM_PWM_Start+0x3e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	bf14      	ite	ne
 80028f2:	2301      	movne	r3, #1
 80028f4:	2300      	moveq	r3, #0
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	e015      	b.n	8002926 <HAL_TIM_PWM_Start+0x6a>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d109      	bne.n	8002914 <HAL_TIM_PWM_Start+0x58>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b01      	cmp	r3, #1
 800290a:	bf14      	ite	ne
 800290c:	2301      	movne	r3, #1
 800290e:	2300      	moveq	r3, #0
 8002910:	b2db      	uxtb	r3, r3
 8002912:	e008      	b.n	8002926 <HAL_TIM_PWM_Start+0x6a>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b01      	cmp	r3, #1
 800291e:	bf14      	ite	ne
 8002920:	2301      	movne	r3, #1
 8002922:	2300      	moveq	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e05e      	b.n	80029ec <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d104      	bne.n	800293e <HAL_TIM_PWM_Start+0x82>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800293c:	e013      	b.n	8002966 <HAL_TIM_PWM_Start+0xaa>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2b04      	cmp	r3, #4
 8002942:	d104      	bne.n	800294e <HAL_TIM_PWM_Start+0x92>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800294c:	e00b      	b.n	8002966 <HAL_TIM_PWM_Start+0xaa>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b08      	cmp	r3, #8
 8002952:	d104      	bne.n	800295e <HAL_TIM_PWM_Start+0xa2>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800295c:	e003      	b.n	8002966 <HAL_TIM_PWM_Start+0xaa>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2202      	movs	r2, #2
 8002962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2201      	movs	r2, #1
 800296c:	6839      	ldr	r1, [r7, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f000 fc94 	bl	800329c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a1e      	ldr	r2, [pc, #120]	; (80029f4 <HAL_TIM_PWM_Start+0x138>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d107      	bne.n	800298e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800298c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a18      	ldr	r2, [pc, #96]	; (80029f4 <HAL_TIM_PWM_Start+0x138>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d00e      	beq.n	80029b6 <HAL_TIM_PWM_Start+0xfa>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a0:	d009      	beq.n	80029b6 <HAL_TIM_PWM_Start+0xfa>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a14      	ldr	r2, [pc, #80]	; (80029f8 <HAL_TIM_PWM_Start+0x13c>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d004      	beq.n	80029b6 <HAL_TIM_PWM_Start+0xfa>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a12      	ldr	r2, [pc, #72]	; (80029fc <HAL_TIM_PWM_Start+0x140>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d111      	bne.n	80029da <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2b06      	cmp	r3, #6
 80029c6:	d010      	beq.n	80029ea <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0201 	orr.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d8:	e007      	b.n	80029ea <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 0201 	orr.w	r2, r2, #1
 80029e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40012c00 	.word	0x40012c00
 80029f8:	40000400 	.word	0x40000400
 80029fc:	40000800 	.word	0x40000800

08002a00 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_TIM_OC_ConfigChannel+0x1a>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e046      	b.n	8002aa8 <HAL_TIM_OC_ConfigChannel+0xa8>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b0c      	cmp	r3, #12
 8002a26:	d839      	bhi.n	8002a9c <HAL_TIM_OC_ConfigChannel+0x9c>
 8002a28:	a201      	add	r2, pc, #4	; (adr r2, 8002a30 <HAL_TIM_OC_ConfigChannel+0x30>)
 8002a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2e:	bf00      	nop
 8002a30:	08002a65 	.word	0x08002a65
 8002a34:	08002a9d 	.word	0x08002a9d
 8002a38:	08002a9d 	.word	0x08002a9d
 8002a3c:	08002a9d 	.word	0x08002a9d
 8002a40:	08002a73 	.word	0x08002a73
 8002a44:	08002a9d 	.word	0x08002a9d
 8002a48:	08002a9d 	.word	0x08002a9d
 8002a4c:	08002a9d 	.word	0x08002a9d
 8002a50:	08002a81 	.word	0x08002a81
 8002a54:	08002a9d 	.word	0x08002a9d
 8002a58:	08002a9d 	.word	0x08002a9d
 8002a5c:	08002a9d 	.word	0x08002a9d
 8002a60:	08002a8f 	.word	0x08002a8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68b9      	ldr	r1, [r7, #8]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 f9f8 	bl	8002e60 <TIM_OC1_SetConfig>
      break;
 8002a70:	e015      	b.n	8002a9e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68b9      	ldr	r1, [r7, #8]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f000 fa57 	bl	8002f2c <TIM_OC2_SetConfig>
      break;
 8002a7e:	e00e      	b.n	8002a9e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68b9      	ldr	r1, [r7, #8]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 faba 	bl	8003000 <TIM_OC3_SetConfig>
      break;
 8002a8c:	e007      	b.n	8002a9e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68b9      	ldr	r1, [r7, #8]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 fb1d 	bl	80030d4 <TIM_OC4_SetConfig>
      break;
 8002a9a:	e000      	b.n	8002a9e <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8002a9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d101      	bne.n	8002aca <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e0ac      	b.n	8002c24 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b0c      	cmp	r3, #12
 8002ad6:	f200 809f 	bhi.w	8002c18 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002ada:	a201      	add	r2, pc, #4	; (adr r2, 8002ae0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae0:	08002b15 	.word	0x08002b15
 8002ae4:	08002c19 	.word	0x08002c19
 8002ae8:	08002c19 	.word	0x08002c19
 8002aec:	08002c19 	.word	0x08002c19
 8002af0:	08002b55 	.word	0x08002b55
 8002af4:	08002c19 	.word	0x08002c19
 8002af8:	08002c19 	.word	0x08002c19
 8002afc:	08002c19 	.word	0x08002c19
 8002b00:	08002b97 	.word	0x08002b97
 8002b04:	08002c19 	.word	0x08002c19
 8002b08:	08002c19 	.word	0x08002c19
 8002b0c:	08002c19 	.word	0x08002c19
 8002b10:	08002bd7 	.word	0x08002bd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68b9      	ldr	r1, [r7, #8]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 f9a0 	bl	8002e60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699a      	ldr	r2, [r3, #24]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0208 	orr.w	r2, r2, #8
 8002b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699a      	ldr	r2, [r3, #24]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0204 	bic.w	r2, r2, #4
 8002b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6999      	ldr	r1, [r3, #24]
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	691a      	ldr	r2, [r3, #16]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	619a      	str	r2, [r3, #24]
      break;
 8002b52:	e062      	b.n	8002c1a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 f9e6 	bl	8002f2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699a      	ldr	r2, [r3, #24]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699a      	ldr	r2, [r3, #24]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6999      	ldr	r1, [r3, #24]
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	021a      	lsls	r2, r3, #8
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	619a      	str	r2, [r3, #24]
      break;
 8002b94:	e041      	b.n	8002c1a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68b9      	ldr	r1, [r7, #8]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 fa2f 	bl	8003000 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	69da      	ldr	r2, [r3, #28]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 0208 	orr.w	r2, r2, #8
 8002bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	69da      	ldr	r2, [r3, #28]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0204 	bic.w	r2, r2, #4
 8002bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	69d9      	ldr	r1, [r3, #28]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	691a      	ldr	r2, [r3, #16]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	61da      	str	r2, [r3, #28]
      break;
 8002bd4:	e021      	b.n	8002c1a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68b9      	ldr	r1, [r7, #8]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 fa79 	bl	80030d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	69da      	ldr	r2, [r3, #28]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69da      	ldr	r2, [r3, #28]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	69d9      	ldr	r1, [r3, #28]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	021a      	lsls	r2, r3, #8
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	61da      	str	r2, [r3, #28]
      break;
 8002c16:	e000      	b.n	8002c1a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002c18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d101      	bne.n	8002c44 <HAL_TIM_ConfigClockSource+0x18>
 8002c40:	2302      	movs	r3, #2
 8002c42:	e0a6      	b.n	8002d92 <HAL_TIM_ConfigClockSource+0x166>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c6a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2b40      	cmp	r3, #64	; 0x40
 8002c7a:	d067      	beq.n	8002d4c <HAL_TIM_ConfigClockSource+0x120>
 8002c7c:	2b40      	cmp	r3, #64	; 0x40
 8002c7e:	d80b      	bhi.n	8002c98 <HAL_TIM_ConfigClockSource+0x6c>
 8002c80:	2b10      	cmp	r3, #16
 8002c82:	d073      	beq.n	8002d6c <HAL_TIM_ConfigClockSource+0x140>
 8002c84:	2b10      	cmp	r3, #16
 8002c86:	d802      	bhi.n	8002c8e <HAL_TIM_ConfigClockSource+0x62>
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d06f      	beq.n	8002d6c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002c8c:	e078      	b.n	8002d80 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c8e:	2b20      	cmp	r3, #32
 8002c90:	d06c      	beq.n	8002d6c <HAL_TIM_ConfigClockSource+0x140>
 8002c92:	2b30      	cmp	r3, #48	; 0x30
 8002c94:	d06a      	beq.n	8002d6c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002c96:	e073      	b.n	8002d80 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c98:	2b70      	cmp	r3, #112	; 0x70
 8002c9a:	d00d      	beq.n	8002cb8 <HAL_TIM_ConfigClockSource+0x8c>
 8002c9c:	2b70      	cmp	r3, #112	; 0x70
 8002c9e:	d804      	bhi.n	8002caa <HAL_TIM_ConfigClockSource+0x7e>
 8002ca0:	2b50      	cmp	r3, #80	; 0x50
 8002ca2:	d033      	beq.n	8002d0c <HAL_TIM_ConfigClockSource+0xe0>
 8002ca4:	2b60      	cmp	r3, #96	; 0x60
 8002ca6:	d041      	beq.n	8002d2c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002ca8:	e06a      	b.n	8002d80 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cae:	d066      	beq.n	8002d7e <HAL_TIM_ConfigClockSource+0x152>
 8002cb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cb4:	d017      	beq.n	8002ce6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002cb6:	e063      	b.n	8002d80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6818      	ldr	r0, [r3, #0]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	6899      	ldr	r1, [r3, #8]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	f000 fac9 	bl	800325e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cda:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	609a      	str	r2, [r3, #8]
      break;
 8002ce4:	e04c      	b.n	8002d80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6818      	ldr	r0, [r3, #0]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	6899      	ldr	r1, [r3, #8]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f000 fab2 	bl	800325e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d08:	609a      	str	r2, [r3, #8]
      break;
 8002d0a:	e039      	b.n	8002d80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6818      	ldr	r0, [r3, #0]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	6859      	ldr	r1, [r3, #4]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	f000 fa29 	bl	8003170 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2150      	movs	r1, #80	; 0x50
 8002d24:	4618      	mov	r0, r3
 8002d26:	f000 fa80 	bl	800322a <TIM_ITRx_SetConfig>
      break;
 8002d2a:	e029      	b.n	8002d80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6818      	ldr	r0, [r3, #0]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	6859      	ldr	r1, [r3, #4]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	f000 fa47 	bl	80031cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2160      	movs	r1, #96	; 0x60
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 fa70 	bl	800322a <TIM_ITRx_SetConfig>
      break;
 8002d4a:	e019      	b.n	8002d80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	6859      	ldr	r1, [r3, #4]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	f000 fa09 	bl	8003170 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2140      	movs	r1, #64	; 0x40
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 fa60 	bl	800322a <TIM_ITRx_SetConfig>
      break;
 8002d6a:	e009      	b.n	8002d80 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4619      	mov	r1, r3
 8002d76:	4610      	mov	r0, r2
 8002d78:	f000 fa57 	bl	800322a <TIM_ITRx_SetConfig>
        break;
 8002d7c:	e000      	b.n	8002d80 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002d7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a29      	ldr	r2, [pc, #164]	; (8002e54 <TIM_Base_SetConfig+0xb8>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d00b      	beq.n	8002dcc <TIM_Base_SetConfig+0x30>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dba:	d007      	beq.n	8002dcc <TIM_Base_SetConfig+0x30>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a26      	ldr	r2, [pc, #152]	; (8002e58 <TIM_Base_SetConfig+0xbc>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d003      	beq.n	8002dcc <TIM_Base_SetConfig+0x30>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a25      	ldr	r2, [pc, #148]	; (8002e5c <TIM_Base_SetConfig+0xc0>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d108      	bne.n	8002dde <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a1c      	ldr	r2, [pc, #112]	; (8002e54 <TIM_Base_SetConfig+0xb8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00b      	beq.n	8002dfe <TIM_Base_SetConfig+0x62>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dec:	d007      	beq.n	8002dfe <TIM_Base_SetConfig+0x62>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a19      	ldr	r2, [pc, #100]	; (8002e58 <TIM_Base_SetConfig+0xbc>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d003      	beq.n	8002dfe <TIM_Base_SetConfig+0x62>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a18      	ldr	r2, [pc, #96]	; (8002e5c <TIM_Base_SetConfig+0xc0>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d108      	bne.n	8002e10 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a07      	ldr	r2, [pc, #28]	; (8002e54 <TIM_Base_SetConfig+0xb8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d103      	bne.n	8002e44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	615a      	str	r2, [r3, #20]
}
 8002e4a:	bf00      	nop
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr
 8002e54:	40012c00 	.word	0x40012c00
 8002e58:	40000400 	.word	0x40000400
 8002e5c:	40000800 	.word	0x40000800

08002e60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b087      	sub	sp, #28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	f023 0201 	bic.w	r2, r3, #1
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f023 0303 	bic.w	r3, r3, #3
 8002e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f023 0302 	bic.w	r3, r3, #2
 8002ea8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a1c      	ldr	r2, [pc, #112]	; (8002f28 <TIM_OC1_SetConfig+0xc8>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d10c      	bne.n	8002ed6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f023 0308 	bic.w	r3, r3, #8
 8002ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f023 0304 	bic.w	r3, r3, #4
 8002ed4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a13      	ldr	r2, [pc, #76]	; (8002f28 <TIM_OC1_SetConfig+0xc8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d111      	bne.n	8002f02 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ee4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002eec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	621a      	str	r2, [r3, #32]
}
 8002f1c:	bf00      	nop
 8002f1e:	371c      	adds	r7, #28
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40012c00 	.word	0x40012c00

08002f2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	f023 0210 	bic.w	r2, r3, #16
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	021b      	lsls	r3, r3, #8
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f023 0320 	bic.w	r3, r3, #32
 8002f76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a1d      	ldr	r2, [pc, #116]	; (8002ffc <TIM_OC2_SetConfig+0xd0>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d10d      	bne.n	8002fa8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fa6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a14      	ldr	r2, [pc, #80]	; (8002ffc <TIM_OC2_SetConfig+0xd0>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d113      	bne.n	8002fd8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	621a      	str	r2, [r3, #32]
}
 8002ff2:	bf00      	nop
 8002ff4:	371c      	adds	r7, #28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr
 8002ffc:	40012c00 	.word	0x40012c00

08003000 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800302e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f023 0303 	bic.w	r3, r3, #3
 8003036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	4313      	orrs	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003048:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	021b      	lsls	r3, r3, #8
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	4313      	orrs	r3, r2
 8003054:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a1d      	ldr	r2, [pc, #116]	; (80030d0 <TIM_OC3_SetConfig+0xd0>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d10d      	bne.n	800307a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003064:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	021b      	lsls	r3, r3, #8
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	4313      	orrs	r3, r2
 8003070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003078:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a14      	ldr	r2, [pc, #80]	; (80030d0 <TIM_OC3_SetConfig+0xd0>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d113      	bne.n	80030aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	011b      	lsls	r3, r3, #4
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	4313      	orrs	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	621a      	str	r2, [r3, #32]
}
 80030c4:	bf00      	nop
 80030c6:	371c      	adds	r7, #28
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bc80      	pop	{r7}
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	40012c00 	.word	0x40012c00

080030d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800310a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	021b      	lsls	r3, r3, #8
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	4313      	orrs	r3, r2
 8003116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800311e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	031b      	lsls	r3, r3, #12
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	4313      	orrs	r3, r2
 800312a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a0f      	ldr	r2, [pc, #60]	; (800316c <TIM_OC4_SetConfig+0x98>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d109      	bne.n	8003148 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800313a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	019b      	lsls	r3, r3, #6
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	4313      	orrs	r3, r2
 8003146:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	621a      	str	r2, [r3, #32]
}
 8003162:	bf00      	nop
 8003164:	371c      	adds	r7, #28
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr
 800316c:	40012c00 	.word	0x40012c00

08003170 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003170:	b480      	push	{r7}
 8003172:	b087      	sub	sp, #28
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	f023 0201 	bic.w	r2, r3, #1
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800319a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	011b      	lsls	r3, r3, #4
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f023 030a 	bic.w	r3, r3, #10
 80031ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	621a      	str	r2, [r3, #32]
}
 80031c2:	bf00      	nop
 80031c4:	371c      	adds	r7, #28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr

080031cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	f023 0210 	bic.w	r2, r3, #16
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	031b      	lsls	r3, r3, #12
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	4313      	orrs	r3, r2
 8003200:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003208:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	621a      	str	r2, [r3, #32]
}
 8003220:	bf00      	nop
 8003222:	371c      	adds	r7, #28
 8003224:	46bd      	mov	sp, r7
 8003226:	bc80      	pop	{r7}
 8003228:	4770      	bx	lr

0800322a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800322a:	b480      	push	{r7}
 800322c:	b085      	sub	sp, #20
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
 8003232:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003240:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4313      	orrs	r3, r2
 8003248:	f043 0307 	orr.w	r3, r3, #7
 800324c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	609a      	str	r2, [r3, #8]
}
 8003254:	bf00      	nop
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr

0800325e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800325e:	b480      	push	{r7}
 8003260:	b087      	sub	sp, #28
 8003262:	af00      	add	r7, sp, #0
 8003264:	60f8      	str	r0, [r7, #12]
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	607a      	str	r2, [r7, #4]
 800326a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003278:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	021a      	lsls	r2, r3, #8
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	431a      	orrs	r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	4313      	orrs	r3, r2
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	4313      	orrs	r3, r2
 800328a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	609a      	str	r2, [r3, #8]
}
 8003292:	bf00      	nop
 8003294:	371c      	adds	r7, #28
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr

0800329c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800329c:	b480      	push	{r7}
 800329e:	b087      	sub	sp, #28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f003 031f 	and.w	r3, r3, #31
 80032ae:	2201      	movs	r2, #1
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a1a      	ldr	r2, [r3, #32]
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	43db      	mvns	r3, r3
 80032be:	401a      	ands	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6a1a      	ldr	r2, [r3, #32]
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f003 031f 	and.w	r3, r3, #31
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	fa01 f303 	lsl.w	r3, r1, r3
 80032d4:	431a      	orrs	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	621a      	str	r2, [r3, #32]
}
 80032da:	bf00      	nop
 80032dc:	371c      	adds	r7, #28
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr

080032e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e046      	b.n	800338a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003322:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	4313      	orrs	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a16      	ldr	r2, [pc, #88]	; (8003394 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d00e      	beq.n	800335e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003348:	d009      	beq.n	800335e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a12      	ldr	r2, [pc, #72]	; (8003398 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d004      	beq.n	800335e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a10      	ldr	r2, [pc, #64]	; (800339c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d10c      	bne.n	8003378 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003364:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	4313      	orrs	r3, r2
 800336e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr
 8003394:	40012c00 	.word	0x40012c00
 8003398:	40000400 	.word	0x40000400
 800339c:	40000800 	.word	0x40000800

080033a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e03f      	b.n	8003432 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d106      	bne.n	80033cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7fd fdbe 	bl	8000f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2224      	movs	r2, #36	; 0x24
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 fdc9 	bl	8003f7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	691a      	ldr	r2, [r3, #16]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	695a      	ldr	r2, [r3, #20]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003408:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003418:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2220      	movs	r2, #32
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b08a      	sub	sp, #40	; 0x28
 800343e:	af02      	add	r7, sp, #8
 8003440:	60f8      	str	r0, [r7, #12]
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	603b      	str	r3, [r7, #0]
 8003446:	4613      	mov	r3, r2
 8003448:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b20      	cmp	r3, #32
 8003458:	d17c      	bne.n	8003554 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <HAL_UART_Transmit+0x2c>
 8003460:	88fb      	ldrh	r3, [r7, #6]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e075      	b.n	8003556 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_UART_Transmit+0x3e>
 8003474:	2302      	movs	r3, #2
 8003476:	e06e      	b.n	8003556 <HAL_UART_Transmit+0x11c>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2221      	movs	r2, #33	; 0x21
 800348a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800348e:	f7fd fecd 	bl	800122c <HAL_GetTick>
 8003492:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	88fa      	ldrh	r2, [r7, #6]
 8003498:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	88fa      	ldrh	r2, [r7, #6]
 800349e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a8:	d108      	bne.n	80034bc <HAL_UART_Transmit+0x82>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d104      	bne.n	80034bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	61bb      	str	r3, [r7, #24]
 80034ba:	e003      	b.n	80034c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034c0:	2300      	movs	r3, #0
 80034c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80034cc:	e02a      	b.n	8003524 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2200      	movs	r2, #0
 80034d6:	2180      	movs	r1, #128	; 0x80
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 fb3b 	bl	8003b54 <UART_WaitOnFlagUntilTimeout>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e036      	b.n	8003556 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10b      	bne.n	8003506 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	461a      	mov	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	3302      	adds	r3, #2
 8003502:	61bb      	str	r3, [r7, #24]
 8003504:	e007      	b.n	8003516 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	781a      	ldrb	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	3301      	adds	r3, #1
 8003514:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800351a:	b29b      	uxth	r3, r3
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003528:	b29b      	uxth	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1cf      	bne.n	80034ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2200      	movs	r2, #0
 8003536:	2140      	movs	r1, #64	; 0x40
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 fb0b 	bl	8003b54 <UART_WaitOnFlagUntilTimeout>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e006      	b.n	8003556 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2220      	movs	r2, #32
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003550:	2300      	movs	r3, #0
 8003552:	e000      	b.n	8003556 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003554:	2302      	movs	r3, #2
  }
}
 8003556:	4618      	mov	r0, r3
 8003558:	3720      	adds	r7, #32
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b084      	sub	sp, #16
 8003562:	af00      	add	r7, sp, #0
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	4613      	mov	r3, r2
 800356a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b20      	cmp	r3, #32
 8003576:	d11d      	bne.n	80035b4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <HAL_UART_Receive_DMA+0x26>
 800357e:	88fb      	ldrh	r3, [r7, #6]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e016      	b.n	80035b6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800358e:	2b01      	cmp	r3, #1
 8003590:	d101      	bne.n	8003596 <HAL_UART_Receive_DMA+0x38>
 8003592:	2302      	movs	r3, #2
 8003594:	e00f      	b.n	80035b6 <HAL_UART_Receive_DMA+0x58>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80035a4:	88fb      	ldrh	r3, [r7, #6]
 80035a6:	461a      	mov	r2, r3
 80035a8:	68b9      	ldr	r1, [r7, #8]
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 fb1c 	bl	8003be8 <UART_Start_Receive_DMA>
 80035b0:	4603      	mov	r3, r0
 80035b2:	e000      	b.n	80035b6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80035b4:	2302      	movs	r3, #2
  }
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b084      	sub	sp, #16
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	bf14      	ite	ne
 80035d8:	2301      	movne	r3, #1
 80035da:	2300      	moveq	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b21      	cmp	r3, #33	; 0x21
 80035ea:	d116      	bne.n	800361a <HAL_UART_DMAStop+0x5c>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d013      	beq.n	800361a <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695a      	ldr	r2, [r3, #20]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003600:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003606:	2b00      	cmp	r3, #0
 8003608:	d004      	beq.n	8003614 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800360e:	4618      	mov	r0, r3
 8003610:	f7fd ffff 	bl	8001612 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 fb4b 	bl	8003cb0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003624:	2b00      	cmp	r3, #0
 8003626:	bf14      	ite	ne
 8003628:	2301      	movne	r3, #1
 800362a:	2300      	moveq	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b22      	cmp	r3, #34	; 0x22
 800363a:	d116      	bne.n	800366a <HAL_UART_DMAStop+0xac>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d013      	beq.n	800366a <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695a      	ldr	r2, [r3, #20]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003650:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003656:	2b00      	cmp	r3, #0
 8003658:	d004      	beq.n	8003664 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	4618      	mov	r0, r3
 8003660:	f7fd ffd7 	bl	8001612 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 fb38 	bl	8003cda <UART_EndRxTransfer>
  }

  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08a      	sub	sp, #40	; 0x28
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003694:	2300      	movs	r3, #0
 8003696:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003698:	2300      	movs	r3, #0
 800369a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10d      	bne.n	80036c6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d008      	beq.n	80036c6 <HAL_UART_IRQHandler+0x52>
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	f003 0320 	and.w	r3, r3, #32
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 fbb2 	bl	8003e28 <UART_Receive_IT>
      return;
 80036c4:	e17c      	b.n	80039c0 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 80b1 	beq.w	8003830 <HAL_UART_IRQHandler+0x1bc>
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d105      	bne.n	80036e4 <HAL_UART_IRQHandler+0x70>
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 80a6 	beq.w	8003830 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <HAL_UART_IRQHandler+0x90>
 80036ee:	6a3b      	ldr	r3, [r7, #32]
 80036f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	f043 0201 	orr.w	r2, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	f003 0304 	and.w	r3, r3, #4
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <HAL_UART_IRQHandler+0xb0>
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b00      	cmp	r3, #0
 8003716:	d005      	beq.n	8003724 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	f043 0202 	orr.w	r2, r3, #2
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00a      	beq.n	8003744 <HAL_UART_IRQHandler+0xd0>
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	f043 0204 	orr.w	r2, r3, #4
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	f003 0308 	and.w	r3, r3, #8
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00f      	beq.n	800376e <HAL_UART_IRQHandler+0xfa>
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	f003 0320 	and.w	r3, r3, #32
 8003754:	2b00      	cmp	r3, #0
 8003756:	d104      	bne.n	8003762 <HAL_UART_IRQHandler+0xee>
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d005      	beq.n	800376e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	f043 0208 	orr.w	r2, r3, #8
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 811f 	beq.w	80039b6 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	f003 0320 	and.w	r3, r3, #32
 800377e:	2b00      	cmp	r3, #0
 8003780:	d007      	beq.n	8003792 <HAL_UART_IRQHandler+0x11e>
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 fb4b 	bl	8003e28 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379c:	2b00      	cmp	r3, #0
 800379e:	bf14      	ite	ne
 80037a0:	2301      	movne	r3, #1
 80037a2:	2300      	moveq	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	f003 0308 	and.w	r3, r3, #8
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d102      	bne.n	80037ba <HAL_UART_IRQHandler+0x146>
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d031      	beq.n	800381e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 fa8d 	bl	8003cda <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d023      	beq.n	8003816 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695a      	ldr	r2, [r3, #20]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037dc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d013      	beq.n	800380e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ea:	4a77      	ldr	r2, [pc, #476]	; (80039c8 <HAL_UART_IRQHandler+0x354>)
 80037ec:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fd ff48 	bl	8001688 <HAL_DMA_Abort_IT>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d016      	beq.n	800382c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003808:	4610      	mov	r0, r2
 800380a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800380c:	e00e      	b.n	800382c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7fd fc84 	bl	800111c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003814:	e00a      	b.n	800382c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7fd fc80 	bl	800111c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800381c:	e006      	b.n	800382c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fd fc7c 	bl	800111c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800382a:	e0c4      	b.n	80039b6 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800382c:	bf00      	nop
    return;
 800382e:	e0c2      	b.n	80039b6 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003834:	2b01      	cmp	r3, #1
 8003836:	f040 80a1 	bne.w	800397c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	f003 0310 	and.w	r3, r3, #16
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 809b 	beq.w	800397c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	f003 0310 	and.w	r3, r3, #16
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 8095 	beq.w	800397c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003852:	2300      	movs	r3, #0
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003872:	2b00      	cmp	r3, #0
 8003874:	d04e      	beq.n	8003914 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003880:	8a3b      	ldrh	r3, [r7, #16]
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 8099 	beq.w	80039ba <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800388c:	8a3a      	ldrh	r2, [r7, #16]
 800388e:	429a      	cmp	r2, r3
 8003890:	f080 8093 	bcs.w	80039ba <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	8a3a      	ldrh	r2, [r7, #16]
 8003898:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	2b20      	cmp	r3, #32
 80038a2:	d02b      	beq.n	80038fc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038b2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	695a      	ldr	r2, [r3, #20]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0201 	bic.w	r2, r2, #1
 80038c2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695a      	ldr	r2, [r3, #20]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038d2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0210 	bic.w	r2, r2, #16
 80038f0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fd fe8b 	bl	8001612 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003904:	b29b      	uxth	r3, r3
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	b29b      	uxth	r3, r3
 800390a:	4619      	mov	r1, r3
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f866 	bl	80039de <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003912:	e052      	b.n	80039ba <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800391c:	b29b      	uxth	r3, r3
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d048      	beq.n	80039be <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800392c:	8a7b      	ldrh	r3, [r7, #18]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d045      	beq.n	80039be <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003940:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695a      	ldr	r2, [r3, #20]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0201 	bic.w	r2, r2, #1
 8003950:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2220      	movs	r2, #32
 8003956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0210 	bic.w	r2, r2, #16
 800396e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003970:	8a7b      	ldrh	r3, [r7, #18]
 8003972:	4619      	mov	r1, r3
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f832 	bl	80039de <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800397a:	e020      	b.n	80039be <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003982:	2b00      	cmp	r3, #0
 8003984:	d008      	beq.n	8003998 <HAL_UART_IRQHandler+0x324>
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 f9e2 	bl	8003d5a <UART_Transmit_IT>
    return;
 8003996:	e013      	b.n	80039c0 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00e      	beq.n	80039c0 <HAL_UART_IRQHandler+0x34c>
 80039a2:	6a3b      	ldr	r3, [r7, #32]
 80039a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d009      	beq.n	80039c0 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 fa23 	bl	8003df8 <UART_EndTransmit_IT>
    return;
 80039b2:	bf00      	nop
 80039b4:	e004      	b.n	80039c0 <HAL_UART_IRQHandler+0x34c>
    return;
 80039b6:	bf00      	nop
 80039b8:	e002      	b.n	80039c0 <HAL_UART_IRQHandler+0x34c>
      return;
 80039ba:	bf00      	nop
 80039bc:	e000      	b.n	80039c0 <HAL_UART_IRQHandler+0x34c>
      return;
 80039be:	bf00      	nop
  }
}
 80039c0:	3728      	adds	r7, #40	; 0x28
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	08003d33 	.word	0x08003d33

080039cc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	bc80      	pop	{r7}
 80039dc:	4770      	bx	lr

080039de <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	460b      	mov	r3, r1
 80039e8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr

080039f4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0320 	and.w	r3, r3, #32
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d12a      	bne.n	8003a66 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a24:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695a      	ldr	r2, [r3, #20]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0201 	bic.w	r2, r2, #1
 8003a34:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695a      	ldr	r2, [r3, #20]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a44:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d107      	bne.n	8003a66 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0210 	bic.w	r2, r2, #16
 8003a64:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d106      	bne.n	8003a7c <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a72:	4619      	mov	r1, r3
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f7ff ffb2 	bl	80039de <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a7a:	e002      	b.n	8003a82 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f7fd fb44 	bl	800110a <HAL_UART_RxCpltCallback>
}
 8003a82:	bf00      	nop
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b084      	sub	sp, #16
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d108      	bne.n	8003ab2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003aa4:	085b      	lsrs	r3, r3, #1
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f7ff ff97 	bl	80039de <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ab0:	e002      	b.n	8003ab8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f7ff ff8a 	bl	80039cc <HAL_UART_RxHalfCpltCallback>
}
 8003ab8:	bf00      	nop
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	bf14      	ite	ne
 8003ae0:	2301      	movne	r3, #1
 8003ae2:	2300      	moveq	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b21      	cmp	r3, #33	; 0x21
 8003af2:	d108      	bne.n	8003b06 <UART_DMAError+0x46>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d005      	beq.n	8003b06 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2200      	movs	r2, #0
 8003afe:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003b00:	68b8      	ldr	r0, [r7, #8]
 8003b02:	f000 f8d5 	bl	8003cb0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	bf14      	ite	ne
 8003b14:	2301      	movne	r3, #1
 8003b16:	2300      	moveq	r3, #0
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b22      	cmp	r3, #34	; 0x22
 8003b26:	d108      	bne.n	8003b3a <UART_DMAError+0x7a>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d005      	beq.n	8003b3a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	2200      	movs	r2, #0
 8003b32:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003b34:	68b8      	ldr	r0, [r7, #8]
 8003b36:	f000 f8d0 	bl	8003cda <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f043 0210 	orr.w	r2, r3, #16
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b46:	68b8      	ldr	r0, [r7, #8]
 8003b48:	f7fd fae8 	bl	800111c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b4c:	bf00      	nop
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	603b      	str	r3, [r7, #0]
 8003b60:	4613      	mov	r3, r2
 8003b62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b64:	e02c      	b.n	8003bc0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6c:	d028      	beq.n	8003bc0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d007      	beq.n	8003b84 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b74:	f7fd fb5a 	bl	800122c <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d21d      	bcs.n	8003bc0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b92:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	695a      	ldr	r2, [r3, #20]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0201 	bic.w	r2, r2, #1
 8003ba2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e00f      	b.n	8003be0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	bf0c      	ite	eq
 8003bd0:	2301      	moveq	r3, #1
 8003bd2:	2300      	movne	r3, #0
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	79fb      	ldrb	r3, [r7, #7]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d0c3      	beq.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	88fa      	ldrh	r2, [r7, #6]
 8003c00:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2222      	movs	r2, #34	; 0x22
 8003c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c14:	4a23      	ldr	r2, [pc, #140]	; (8003ca4 <UART_Start_Receive_DMA+0xbc>)
 8003c16:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1c:	4a22      	ldr	r2, [pc, #136]	; (8003ca8 <UART_Start_Receive_DMA+0xc0>)
 8003c1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c24:	4a21      	ldr	r2, [pc, #132]	; (8003cac <UART_Start_Receive_DMA+0xc4>)
 8003c26:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003c30:	f107 0308 	add.w	r3, r7, #8
 8003c34:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	4619      	mov	r1, r3
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	88fb      	ldrh	r3, [r7, #6]
 8003c48:	f7fd fc84 	bl	8001554 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	613b      	str	r3, [r7, #16]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	613b      	str	r3, [r7, #16]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	613b      	str	r3, [r7, #16]
 8003c60:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c78:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695a      	ldr	r2, [r3, #20]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f042 0201 	orr.w	r2, r2, #1
 8003c88:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	695a      	ldr	r2, [r3, #20]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c98:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3718      	adds	r7, #24
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	080039f5 	.word	0x080039f5
 8003ca8:	08003a8b 	.word	0x08003a8b
 8003cac:	08003ac1 	.word	0x08003ac1

08003cb0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003cc6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr

08003cda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68da      	ldr	r2, [r3, #12]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003cf0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695a      	ldr	r2, [r3, #20]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0201 	bic.w	r2, r2, #1
 8003d00:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d107      	bne.n	8003d1a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0210 	bic.w	r2, r2, #16
 8003d18:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bc80      	pop	{r7}
 8003d30:	4770      	bx	lr

08003d32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b084      	sub	sp, #16
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f7fd f9e5 	bl	800111c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d52:	bf00      	nop
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b085      	sub	sp, #20
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b21      	cmp	r3, #33	; 0x21
 8003d6c:	d13e      	bne.n	8003dec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d76:	d114      	bne.n	8003da2 <UART_Transmit_IT+0x48>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d110      	bne.n	8003da2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	1c9a      	adds	r2, r3, #2
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	621a      	str	r2, [r3, #32]
 8003da0:	e008      	b.n	8003db4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	1c59      	adds	r1, r3, #1
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6211      	str	r1, [r2, #32]
 8003dac:	781a      	ldrb	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10f      	bne.n	8003de8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dd6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003de6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003de8:	2300      	movs	r3, #0
 8003dea:	e000      	b.n	8003dee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003dec:	2302      	movs	r3, #2
  }
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bc80      	pop	{r7}
 8003df6:	4770      	bx	lr

08003df8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e0e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7fd f96d 	bl	80010f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b22      	cmp	r3, #34	; 0x22
 8003e3a:	f040 8099 	bne.w	8003f70 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e46:	d117      	bne.n	8003e78 <UART_Receive_IT+0x50>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d113      	bne.n	8003e78 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e50:	2300      	movs	r3, #0
 8003e52:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e58:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e70:	1c9a      	adds	r2, r3, #2
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	629a      	str	r2, [r3, #40]	; 0x28
 8003e76:	e026      	b.n	8003ec6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e8a:	d007      	beq.n	8003e9c <UART_Receive_IT+0x74>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10a      	bne.n	8003eaa <UART_Receive_IT+0x82>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d106      	bne.n	8003eaa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	701a      	strb	r2, [r3, #0]
 8003ea8:	e008      	b.n	8003ebc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d148      	bne.n	8003f6c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68da      	ldr	r2, [r3, #12]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0220 	bic.w	r2, r2, #32
 8003ee8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68da      	ldr	r2, [r3, #12]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ef8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695a      	ldr	r2, [r3, #20]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0201 	bic.w	r2, r2, #1
 8003f08:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d123      	bne.n	8003f62 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68da      	ldr	r2, [r3, #12]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 0210 	bic.w	r2, r2, #16
 8003f2e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0310 	and.w	r3, r3, #16
 8003f3a:	2b10      	cmp	r3, #16
 8003f3c:	d10a      	bne.n	8003f54 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f58:	4619      	mov	r1, r3
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7ff fd3f 	bl	80039de <HAL_UARTEx_RxEventCallback>
 8003f60:	e002      	b.n	8003f68 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7fd f8d1 	bl	800110a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	e002      	b.n	8003f72 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	e000      	b.n	8003f72 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003f70:	2302      	movs	r3, #2
  }
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
	...

08003f7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003fb6:	f023 030c 	bic.w	r3, r3, #12
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	6812      	ldr	r2, [r2, #0]
 8003fbe:	68b9      	ldr	r1, [r7, #8]
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699a      	ldr	r2, [r3, #24]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a2c      	ldr	r2, [pc, #176]	; (8004090 <UART_SetConfig+0x114>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d103      	bne.n	8003fec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003fe4:	f7fe fa9e 	bl	8002524 <HAL_RCC_GetPCLK2Freq>
 8003fe8:	60f8      	str	r0, [r7, #12]
 8003fea:	e002      	b.n	8003ff2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003fec:	f7fe fa86 	bl	80024fc <HAL_RCC_GetPCLK1Freq>
 8003ff0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009a      	lsls	r2, r3, #2
 8003ffc:	441a      	add	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	fbb2 f3f3 	udiv	r3, r2, r3
 8004008:	4a22      	ldr	r2, [pc, #136]	; (8004094 <UART_SetConfig+0x118>)
 800400a:	fba2 2303 	umull	r2, r3, r2, r3
 800400e:	095b      	lsrs	r3, r3, #5
 8004010:	0119      	lsls	r1, r3, #4
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	4613      	mov	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	009a      	lsls	r2, r3, #2
 800401c:	441a      	add	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	fbb2 f2f3 	udiv	r2, r2, r3
 8004028:	4b1a      	ldr	r3, [pc, #104]	; (8004094 <UART_SetConfig+0x118>)
 800402a:	fba3 0302 	umull	r0, r3, r3, r2
 800402e:	095b      	lsrs	r3, r3, #5
 8004030:	2064      	movs	r0, #100	; 0x64
 8004032:	fb00 f303 	mul.w	r3, r0, r3
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	3332      	adds	r3, #50	; 0x32
 800403c:	4a15      	ldr	r2, [pc, #84]	; (8004094 <UART_SetConfig+0x118>)
 800403e:	fba2 2303 	umull	r2, r3, r2, r3
 8004042:	095b      	lsrs	r3, r3, #5
 8004044:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004048:	4419      	add	r1, r3
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	4613      	mov	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	009a      	lsls	r2, r3, #2
 8004054:	441a      	add	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004060:	4b0c      	ldr	r3, [pc, #48]	; (8004094 <UART_SetConfig+0x118>)
 8004062:	fba3 0302 	umull	r0, r3, r3, r2
 8004066:	095b      	lsrs	r3, r3, #5
 8004068:	2064      	movs	r0, #100	; 0x64
 800406a:	fb00 f303 	mul.w	r3, r0, r3
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	011b      	lsls	r3, r3, #4
 8004072:	3332      	adds	r3, #50	; 0x32
 8004074:	4a07      	ldr	r2, [pc, #28]	; (8004094 <UART_SetConfig+0x118>)
 8004076:	fba2 2303 	umull	r2, r3, r2, r3
 800407a:	095b      	lsrs	r3, r3, #5
 800407c:	f003 020f 	and.w	r2, r3, #15
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	440a      	add	r2, r1
 8004086:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004088:	bf00      	nop
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40013800 	.word	0x40013800
 8004094:	51eb851f 	.word	0x51eb851f

08004098 <__libc_init_array>:
 8004098:	b570      	push	{r4, r5, r6, lr}
 800409a:	2500      	movs	r5, #0
 800409c:	4e0c      	ldr	r6, [pc, #48]	; (80040d0 <__libc_init_array+0x38>)
 800409e:	4c0d      	ldr	r4, [pc, #52]	; (80040d4 <__libc_init_array+0x3c>)
 80040a0:	1ba4      	subs	r4, r4, r6
 80040a2:	10a4      	asrs	r4, r4, #2
 80040a4:	42a5      	cmp	r5, r4
 80040a6:	d109      	bne.n	80040bc <__libc_init_array+0x24>
 80040a8:	f000 f822 	bl	80040f0 <_init>
 80040ac:	2500      	movs	r5, #0
 80040ae:	4e0a      	ldr	r6, [pc, #40]	; (80040d8 <__libc_init_array+0x40>)
 80040b0:	4c0a      	ldr	r4, [pc, #40]	; (80040dc <__libc_init_array+0x44>)
 80040b2:	1ba4      	subs	r4, r4, r6
 80040b4:	10a4      	asrs	r4, r4, #2
 80040b6:	42a5      	cmp	r5, r4
 80040b8:	d105      	bne.n	80040c6 <__libc_init_array+0x2e>
 80040ba:	bd70      	pop	{r4, r5, r6, pc}
 80040bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040c0:	4798      	blx	r3
 80040c2:	3501      	adds	r5, #1
 80040c4:	e7ee      	b.n	80040a4 <__libc_init_array+0xc>
 80040c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040ca:	4798      	blx	r3
 80040cc:	3501      	adds	r5, #1
 80040ce:	e7f2      	b.n	80040b6 <__libc_init_array+0x1e>
 80040d0:	08004148 	.word	0x08004148
 80040d4:	08004148 	.word	0x08004148
 80040d8:	08004148 	.word	0x08004148
 80040dc:	0800414c 	.word	0x0800414c

080040e0 <memset>:
 80040e0:	4603      	mov	r3, r0
 80040e2:	4402      	add	r2, r0
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d100      	bne.n	80040ea <memset+0xa>
 80040e8:	4770      	bx	lr
 80040ea:	f803 1b01 	strb.w	r1, [r3], #1
 80040ee:	e7f9      	b.n	80040e4 <memset+0x4>

080040f0 <_init>:
 80040f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040f2:	bf00      	nop
 80040f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040f6:	bc08      	pop	{r3}
 80040f8:	469e      	mov	lr, r3
 80040fa:	4770      	bx	lr

080040fc <_fini>:
 80040fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040fe:	bf00      	nop
 8004100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004102:	bc08      	pop	{r3}
 8004104:	469e      	mov	lr, r3
 8004106:	4770      	bx	lr
